import { IMessagePassingProtocol } from 'vscode/vscode/vs/base/parts/ipc/common/ipc';
import { LocalProcessRunningLocation } from 'vscode/vscode/vs/workbench/services/extensions/common/extensionRunningLocation';
import { IExtensionHost, ExtensionHostStartup, ExtensionHostExtensions } from 'vscode/vscode/vs/workbench/services/extensions/common/extensions';
import { IWebWorkerExtensionHostDataProvider } from 'vscode/vscode/vs/workbench/services/extensions/browser/webWorkerExtensionHost';
import { ITelemetryService } from 'vscode/vscode/vs/platform/telemetry/common/telemetry';
import { IWorkspaceContextService } from 'vscode/vscode/vs/platform/workspace/common/workspace';
import { ILabelService } from 'vscode/vscode/vs/platform/label/common/label';
import { ILogService, ILoggerService } from 'vscode/vscode/vs/platform/log/common/log';
import { IBrowserWorkbenchEnvironmentService } from 'vscode/vscode/vs/workbench/services/environment/browser/environmentService';
import { IProductService } from 'vscode/vscode/vs/platform/product/common/productService';
import { IUserDataProfilesService } from 'vscode/vscode/vs/platform/userDataProfile/common/userDataProfile';
import { Event } from 'vscode/vscode/vs/base/common/event';

declare class LocalExtensionHost implements IExtensionHost {
    readonly runningLocation: LocalProcessRunningLocation;
    readonly startup: ExtensionHostStartup;
    private readonly _initDataProvider;
    private readonly _telemetryService;
    private readonly _contextService;
    private readonly _labelService;
    private readonly _logService;
    private readonly _loggerService;
    private readonly _environmentService;
    private readonly _productService;
    private readonly _userDataProfilesService;
    readonly remoteAuthority: null;
    extensions: ExtensionHostExtensions | null;
    private readonly _extensionHostLogsLocation;
    private _protocolPromise;
    constructor(runningLocation: LocalProcessRunningLocation, startup: ExtensionHostStartup, _initDataProvider: IWebWorkerExtensionHostDataProvider, _telemetryService: ITelemetryService, _contextService: IWorkspaceContextService, _labelService: ILabelService, _logService: ILogService, _loggerService: ILoggerService, _environmentService: IBrowserWorkbenchEnvironmentService, _productService: IProductService, _userDataProfilesService: IUserDataProfilesService);
    onExit: Event<any>;
    start(): Promise<IMessagePassingProtocol>;
    _start(): Promise<IMessagePassingProtocol>;
    private _createExtHostInitData;
    getInspectPort(): number | undefined;
    enableInspectPort(): Promise<boolean>;
    dispose(): void;
}

export { LocalExtensionHost };
