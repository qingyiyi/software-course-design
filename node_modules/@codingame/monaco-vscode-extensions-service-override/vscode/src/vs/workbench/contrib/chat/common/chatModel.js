import { Emitter } from 'monaco-editor/esm/vs/base/common/event.js';
import { isMarkdownString, MarkdownString } from 'monaco-editor/esm/vs/base/common/htmlContent.js';
import { Disposable } from 'monaco-editor/esm/vs/base/common/lifecycle.js';

class ChatRequestModel {
    static { this.nextId = 0; }
    get id() {
        return this._id;
    }
    get providerRequestId() {
        return this._providerRequestId;
    }
    get username() {
        return this.session.requesterUsername;
    }
    get avatarIconUri() {
        return this.session.requesterAvatarIconUri;
    }
    constructor(session, message, _providerRequestId) {
        this.session = session;
        this.message = message;
        this._providerRequestId = _providerRequestId;
        this._id = 'request_' + ChatRequestModel.nextId++;
    }
    setProviderRequestId(providerRequestId) {
        this._providerRequestId = providerRequestId;
    }
}
class Response {
    get onDidChangeValue() {
        return this._onDidChangeValue.event;
    }
    get usedContext() {
        return this._usedContext;
    }
    get value() {
        return this._responseData;
    }
    constructor(value) {
        this._onDidChangeValue = ( new Emitter());
        this._responseData = Array.isArray(value) ? value : [value];
        this._responseParts = Array.isArray(value) ? ( value.map((v) => ('value' in v ? { string: v } : { treeData: v }))) : [{ string: value }];
        this._responseRepr = ( this._responseParts.map((part) => {
            if (isCompleteInteractiveProgressTreeData(part)) {
                return '';
            }
            return part.string.value;
        })).join('\n');
    }
    asString() {
        return this._responseRepr;
    }
    updateContent(responsePart, quiet) {
        if (typeof responsePart === 'string' || isMarkdownString(responsePart)) {
            const responsePartLength = this._responseParts.length - 1;
            const lastResponsePart = this._responseParts[responsePartLength];
            if (lastResponsePart.isPlaceholder === true || isCompleteInteractiveProgressTreeData(lastResponsePart)) {
                this._responseParts.push({ string: typeof responsePart === 'string' ? ( new MarkdownString(responsePart)) : responsePart });
            }
            else {
                if (isMarkdownString(responsePart)) {
                    this._responseParts[responsePartLength] = { string: ( new MarkdownString(lastResponsePart.string.value + responsePart.value, responsePart)) };
                }
                else {
                    this._responseParts[responsePartLength] = { string: ( new MarkdownString(lastResponsePart.string.value + responsePart, lastResponsePart.string)) };
                }
            }
            this._updateRepr(quiet);
        }
        else if ('placeholder' in responsePart) {
            const responsePosition = this._responseParts.push({ string: ( new MarkdownString(responsePart.placeholder)), isPlaceholder: true }) - 1;
            this._updateRepr(quiet);
            responsePart.resolvedContent?.then((content) => {
                if (typeof content === 'string') {
                    this._responseParts[responsePosition] = { string: ( new MarkdownString(content)), isPlaceholder: true };
                    this._updateRepr(quiet);
                }
                else if ('value' in content) {
                    this._responseParts[responsePosition] = { string: content, isPlaceholder: true };
                    this._updateRepr(quiet);
                }
                else if (content.treeData) {
                    this._responseParts[responsePosition] = { treeData: content.treeData };
                    this._updateRepr(quiet);
                }
            });
        }
        else if (isCompleteInteractiveProgressTreeData(responsePart)) {
            this._responseParts.push(responsePart);
            this._updateRepr(quiet);
        }
        else if ('documents' in responsePart) {
            this._usedContext = responsePart;
        }
    }
    _updateRepr(quiet) {
        this._responseData = ( this._responseParts.map(part => {
            if (isCompleteInteractiveProgressTreeData(part)) {
                return part.treeData;
            }
            else if (part.isPlaceholder) {
                return { ...part.string, isPlaceholder: true };
            }
            return part.string;
        }));
        this._responseRepr = ( this._responseParts.map(part => {
            if (isCompleteInteractiveProgressTreeData(part)) {
                return '';
            }
            return part.string.value;
        })).join('\n\n');
        if (!quiet) {
            this._onDidChangeValue.fire();
        }
    }
}
class ChatResponseModel extends Disposable {
    static { this.nextId = 0; }
    get id() {
        return this._id;
    }
    get providerResponseId() {
        return this._providerResponseId;
    }
    get isComplete() {
        return this._isComplete;
    }
    get isCanceled() {
        return this._isCanceled;
    }
    get vote() {
        return this._vote;
    }
    get followups() {
        return this._followups;
    }
    get response() {
        return this._response;
    }
    get errorDetails() {
        return this._errorDetails;
    }
    get providerId() {
        return this.session.providerId;
    }
    get username() {
        return this.agent?.metadata.fullName ?? this.session.responderUsername;
    }
    get avatarIconUri() {
        return this.agent?.metadata.icon ?? this.session.responderAvatarIconUri;
    }
    constructor(_response, session, agent, _isComplete = false, _isCanceled = false, _vote, _providerResponseId, _errorDetails, _followups) {
        super();
        this.session = session;
        this.agent = agent;
        this._isComplete = _isComplete;
        this._isCanceled = _isCanceled;
        this._vote = _vote;
        this._providerResponseId = _providerResponseId;
        this._errorDetails = _errorDetails;
        this._followups = _followups;
        this._onDidChange = this._register(( new Emitter()));
        this.onDidChange = this._onDidChange.event;
        this._response = ( new Response(_response));
        this._register(this._response.onDidChangeValue(() => this._onDidChange.fire()));
        this._id = 'response_' + ChatResponseModel.nextId++;
    }
    updateContent(responsePart, quiet) {
        this._response.updateContent(responsePart, quiet);
    }
    setProviderResponseId(providerResponseId) {
        this._providerResponseId = providerResponseId;
    }
    setErrorDetails(errorDetails) {
        this._errorDetails = errorDetails;
        this._onDidChange.fire();
    }
    complete() {
        this._isComplete = true;
        this._onDidChange.fire();
    }
    cancel() {
        this._isComplete = true;
        this._isCanceled = true;
        this._onDidChange.fire();
    }
    setFollowups(followups) {
        this._followups = followups;
        this._onDidChange.fire();
    }
    setVote(vote) {
        this._vote = vote;
        this._onDidChange.fire();
    }
}
class ChatWelcomeMessageModel {
    static { this.nextId = 0; }
    get id() {
        return this._id;
    }
    constructor(session, content) {
        this.session = session;
        this.content = content;
        this._id = 'welcome_' + ChatWelcomeMessageModel.nextId++;
    }
    get username() {
        return this.session.responderUsername;
    }
    get avatarIconUri() {
        return this.session.responderAvatarIconUri;
    }
}
function isCompleteInteractiveProgressTreeData(item) {
    return typeof item === 'object' && !!item && 'treeData' in item;
}

export { ChatRequestModel, ChatResponseModel, ChatWelcomeMessageModel, Response, isCompleteInteractiveProgressTreeData };
