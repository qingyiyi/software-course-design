import { __decorate, __param } from '../../../../../../external/tslib/tslib.es6.js';
import { Disposable, DisposableMap } from 'monaco-editor/esm/vs/base/common/lifecycle.js';
import { URI } from 'monaco-editor/esm/vs/base/common/uri.js';
import { MainContext, ExtHostContext } from 'vscode/vscode/vs/workbench/api/common/extHost.protocol';
import { extHostNamedCustomer } from '../../services/extensions/common/extHostCustomers.js';
import { IWorkbenchIssueService } from 'vscode/vscode/vs/workbench/services/issue/common/issue';

let MainThreadIssueReporter = class MainThreadIssueReporter extends Disposable {
    constructor(context, _issueService) {
        super();
        this._issueService = _issueService;
        this._registrations = this._register(( new DisposableMap()));
        this._proxy = ( context.getProxy(ExtHostContext.ExtHostIssueReporter));
    }
    $registerIssueUriRequestHandler(extensionId) {
        const handler = {
            provideIssueUrl: async (token) => {
                const parts = await this._proxy.$getIssueReporterUri(extensionId, token);
                return ( URI.from(parts));
            }
        };
        this._registrations.set(extensionId, this._issueService.registerIssueUriRequestHandler(extensionId, handler));
    }
    $unregisterIssueUriRequestHandler(extensionId) {
        this._registrations.deleteAndDispose(extensionId);
    }
};
MainThreadIssueReporter = __decorate([
    extHostNamedCustomer(MainContext.MainThreadIssueReporter),
    ( __param(1, IWorkbenchIssueService))
], MainThreadIssueReporter);

export { MainThreadIssueReporter };
