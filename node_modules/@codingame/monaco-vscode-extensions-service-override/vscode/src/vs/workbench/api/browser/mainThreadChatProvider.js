import { __decorate, __param } from '../../../../../../external/tslib/tslib.es6.js';
import { DisposableMap } from 'monaco-editor/esm/vs/base/common/lifecycle.js';
import { ILogService } from 'monaco-editor/esm/vs/platform/log/common/log.js';
import { Progress } from 'monaco-editor/esm/vs/platform/progress/common/progress.js';
import { MainContext, ExtHostContext } from 'vscode/vscode/vs/workbench/api/common/extHost.protocol';
import { IChatProviderService } from 'vscode/vscode/vs/workbench/contrib/chat/common/chatProvider';
import { extHostNamedCustomer } from '../../services/extensions/common/extHostCustomers.js';

let MainThreadChatProvider = class MainThreadChatProvider {
    constructor(extHostContext, _chatProviderService, _logService) {
        this._chatProviderService = _chatProviderService;
        this._logService = _logService;
        this._providerRegistrations = ( new DisposableMap());
        this._pendingProgress = ( new Map());
        this._proxy = ( extHostContext.getProxy(ExtHostContext.ExtHostChatProvider));
    }
    dispose() {
        this._providerRegistrations.dispose();
    }
    $registerProvider(handle, identifier, metadata) {
        const registration = this._chatProviderService.registerChatResponseProvider(identifier, {
            metadata,
            provideChatResponse: async (messages, options, progress, token) => {
                const requestId = (Math.random() * 1e6) | 0;
                this._pendingProgress.set(requestId, progress);
                try {
                    await this._proxy.$provideChatResponse(handle, requestId, messages, options, token);
                }
                finally {
                    this._pendingProgress.delete(requestId);
                }
            }
        });
        this._providerRegistrations.set(handle, registration);
    }
    async $handleProgressChunk(requestId, chunk) {
        this._pendingProgress.get(requestId)?.report(chunk);
    }
    $unregisterProvider(handle) {
        this._providerRegistrations.deleteAndDispose(handle);
    }
    async $fetchResponse(extension, providerId, requestId, messages, options, token) {
        this._logService.debug('[CHAT] extension request STARTED', extension.value, requestId);
        const task = this._chatProviderService.fetchChatResponse(providerId, messages, options, ( new Progress(value => {
            this._proxy.$handleResponseFragment(requestId, value);
        })), token);
        task.catch(err => {
            this._logService.error('[CHAT] extension request ERRORED', err, extension.value, requestId);
        }).finally(() => {
            this._logService.debug('[CHAT] extension request DONE', extension.value, requestId);
        });
        return task;
    }
};
MainThreadChatProvider = __decorate([
    extHostNamedCustomer(MainContext.MainThreadChatProvider),
    ( __param(1, IChatProviderService)),
    ( __param(2, ILogService))
], MainThreadChatProvider);

export { MainThreadChatProvider };
