import { __decorate, __param } from '../../../../../../external/tslib/tslib.es6.js';
import { DisposableMap } from 'monaco-editor/esm/vs/base/common/lifecycle.js';
import { revive } from 'monaco-editor/esm/vs/base/common/marshalling.js';
import { MainContext, ExtHostContext } from 'vscode/vscode/vs/workbench/api/common/extHost.protocol';
import { IChatAgentService } from 'vscode/vscode/vs/workbench/contrib/chat/common/chatAgents';
import { extHostNamedCustomer } from '../../services/extensions/common/extHostCustomers.js';

let MainThreadChatAgents = class MainThreadChatAgents {
    constructor(extHostContext, _chatAgentService) {
        this._chatAgentService = _chatAgentService;
        this._agents = ( new DisposableMap());
        this._pendingProgress = ( new Map());
        this._proxy = ( extHostContext.getProxy(ExtHostContext.ExtHostChatAgents));
    }
    $unregisterAgent(handle) {
        this._agents.deleteAndDispose(handle);
    }
    dispose() {
        this._agents.clearAndDisposeAll();
    }
    $registerAgent(handle, name, metadata) {
        if (!this._chatAgentService.hasAgent(name)) {
            this._chatAgentService.registerAgentData({
                id: name,
                metadata: revive(metadata)
            });
        }
        const d = this._chatAgentService.registerAgentCallback(name, async (prompt, progress, history, token) => {
            const requestId = Math.random();
            this._pendingProgress.set(requestId, progress);
            try {
                return await this._proxy.$invokeAgent(handle, requestId, prompt, { history }, token);
            }
            finally {
                this._pendingProgress.delete(requestId);
            }
        });
        this._agents.set(handle, d);
    }
    async $handleProgressChunk(requestId, chunk) {
        this._pendingProgress.get(requestId)?.report(revive(chunk));
    }
    $unregisterCommand(handle) {
        this._agents.deleteAndDispose(handle);
    }
};
MainThreadChatAgents = __decorate([
    extHostNamedCustomer(MainContext.MainThreadChatAgents),
    ( __param(1, IChatAgentService))
], MainThreadChatAgents);

export { MainThreadChatAgents };
