import { __decorate, __param } from '../../../../../../external/tslib/tslib.es6.js';
import { DisposableMap } from 'monaco-editor/esm/vs/base/common/lifecycle.js';
import { revive } from 'monaco-editor/esm/vs/base/common/marshalling.js';
import { MainContext, ExtHostContext } from 'vscode/vscode/vs/workbench/api/common/extHost.protocol';
import { IChatSlashCommandService } from 'vscode/vscode/vs/workbench/contrib/chat/common/chatSlashCommands';
import { extHostNamedCustomer } from '../../services/extensions/common/extHostCustomers.js';

let MainThreadChatSlashCommands = class MainThreadChatSlashCommands {
    constructor(extHostContext, _chatSlashCommandService) {
        this._chatSlashCommandService = _chatSlashCommandService;
        this._commands = ( new DisposableMap());
        this._pendingProgress = ( new Map());
        this._proxy = ( extHostContext.getProxy(ExtHostContext.ExtHostChatSlashCommands));
    }
    dispose() {
        this._commands.clearAndDisposeAll();
    }
    $registerCommand(handle, name, detail) {
        if (!this._chatSlashCommandService.hasCommand(name)) {
            this._chatSlashCommandService.registerSlashData({
                command: name,
                detail
            });
        }
        const d = this._chatSlashCommandService.registerSlashCallback(name, async (prompt, progress, history, token) => {
            const requestId = Math.random();
            this._pendingProgress.set(requestId, progress);
            try {
                return await this._proxy.$executeCommand(handle, requestId, prompt, { history }, token);
            }
            finally {
                this._pendingProgress.delete(requestId);
            }
        });
        this._commands.set(handle, d);
    }
    async $handleProgressChunk(requestId, chunk) {
        this._pendingProgress.get(requestId)?.report(revive(chunk));
    }
    $unregisterCommand(handle) {
        this._commands.deleteAndDispose(handle);
    }
};
MainThreadChatSlashCommands = __decorate([
    extHostNamedCustomer(MainContext.MainThreadChatSlashCommands),
    ( __param(1, IChatSlashCommandService))
], MainThreadChatSlashCommands);

export { MainThreadChatSlashCommands };
