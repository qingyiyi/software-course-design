import { ExtensionIdentifierMap } from 'monaco-editor/esm/vs/platform/extensions/common/extensions.js';
import { localizeWithPath } from 'monaco-editor/esm/vs/nls.js';
import { gte } from 'vscode-semver';

function dedupExtensions(system, user, development, logService) {
    const result = ( new ExtensionIdentifierMap());
    system.forEach((systemExtension) => {
        const extension = result.get(systemExtension.identifier);
        if (extension) {
            logService.warn(( localizeWithPath(
                'vs/workbench/services/extensions/common/extensionsUtil',
                'overwritingExtension',
                "Overwriting extension {0} with {1}.",
                extension.extensionLocation.fsPath,
                systemExtension.extensionLocation.fsPath
            )));
        }
        result.set(systemExtension.identifier, systemExtension);
    });
    user.forEach((userExtension) => {
        const extension = result.get(userExtension.identifier);
        if (extension) {
            if (extension.isBuiltin) {
                if (gte(extension.version, userExtension.version)) {
                    logService.warn(`Skipping extension ${userExtension.extensionLocation.path} in favour of the builtin extension ${extension.extensionLocation.path}.`);
                    return;
                }
                userExtension.isBuiltin = true;
            }
            else {
                logService.warn(( localizeWithPath(
                    'vs/workbench/services/extensions/common/extensionsUtil',
                    'overwritingExtension',
                    "Overwriting extension {0} with {1}.",
                    extension.extensionLocation.fsPath,
                    userExtension.extensionLocation.fsPath
                )));
            }
        }
        else if (userExtension.isBuiltin) {
            logService.warn(`Skipping obsolete builtin extension ${userExtension.extensionLocation.path}`);
            return;
        }
        result.set(userExtension.identifier, userExtension);
    });
    development.forEach(developedExtension => {
        logService.info(( localizeWithPath(
            'vs/workbench/services/extensions/common/extensionsUtil',
            'extensionUnderDevelopment',
            "Loading development extension at {0}",
            developedExtension.extensionLocation.fsPath
        )));
        const extension = result.get(developedExtension.identifier);
        if (extension) {
            if (extension.isBuiltin) {
                developedExtension.isBuiltin = true;
            }
        }
        result.set(developedExtension.identifier, developedExtension);
    });
    return Array.from(( result.values()));
}

export { dedupExtensions };
