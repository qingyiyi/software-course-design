import { __decorate, __param } from '../../../../../../external/tslib/tslib.es6.js';
import { IFileService } from 'monaco-editor/esm/vs/platform/files/common/files.js';
import { FileAccess, Schemas } from 'monaco-editor/esm/vs/base/common/network.js';
import { IProductService } from 'monaco-editor/esm/vs/platform/product/common/productService.js';
import { IStorageService } from 'monaco-editor/esm/vs/platform/storage/common/storage.js';
import { IEnvironmentService } from 'monaco-editor/esm/vs/platform/environment/common/environment.js';
import { ILogService } from 'monaco-editor/esm/vs/platform/log/common/log.js';
import { IConfigurationService } from 'monaco-editor/esm/vs/platform/configuration/common/configuration.js';
import { AbstractExtensionResourceLoaderService } from 'vscode/vscode/vs/platform/extensionResourceLoader/common/extensionResourceLoader';

let ExtensionResourceLoaderService = class ExtensionResourceLoaderService extends AbstractExtensionResourceLoaderService {
    constructor(fileService, storageService, productService, environmentService, configurationService, _logService) {
        super(fileService, storageService, productService, environmentService, configurationService);
        this._logService = _logService;
    }
    async readExtensionResource(uri) {
        uri = FileAccess.uriToBrowserUri(uri);
        if (uri.scheme !== Schemas.http && uri.scheme !== Schemas.https && uri.scheme !== Schemas.data) {
            const result = await this._fileService.readFile(uri);
            return ( result.value.toString());
        }
        const requestInit = {};
        if (this.isExtensionGalleryResource(uri)) {
            requestInit.headers = await this.getExtensionGalleryRequestHeaders();
            requestInit.mode = 'cors';
        }
        const response = await fetch(( uri.toString(true)), requestInit);
        if (response.status !== 200) {
            this._logService.info(`Request to '${( uri.toString(true))}' failed with status code ${response.status}`);
            throw new Error(response.statusText);
        }
        return response.text();
    }
};
ExtensionResourceLoaderService = ( __decorate([
    ( __param(0, IFileService)),
    ( __param(1, IStorageService)),
    ( __param(2, IProductService)),
    ( __param(3, IEnvironmentService)),
    ( __param(4, IConfigurationService)),
    ( __param(5, ILogService))
], ExtensionResourceLoaderService));

export { ExtensionResourceLoaderService };
