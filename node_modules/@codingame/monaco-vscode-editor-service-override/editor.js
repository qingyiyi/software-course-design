import { __decorate, __param } from './external/tslib/tslib.es6.js';
import { StandaloneServices } from 'monaco-editor/esm/vs/editor/standalone/browser/standaloneServices.js';
import { Event } from 'monaco-editor/esm/vs/base/common/event.js';
import { ICodeEditorService } from 'monaco-editor/esm/vs/editor/browser/services/codeEditorService.js';
import { CodeEditorService } from 'vscode/vscode/vs/workbench/services/editor/browser/codeEditorService';
import { IEditorService } from 'vscode/vscode/vs/workbench/services/editor/common/editorService';
import { EditorExtensions } from 'vscode/vscode/vs/workbench/common/editor';
import { SyncDescriptor } from 'monaco-editor/esm/vs/platform/instantiation/common/descriptors.js';
import { ITextEditorService, TextEditorService } from 'vscode/vscode/vs/workbench/services/textfile/common/textEditorService';
import { Registry } from 'monaco-editor/esm/vs/platform/registry/common/platform.js';
import { FILE_EDITOR_INPUT_ID } from 'vscode/vscode/vs/workbench/contrib/files/common/files';
import { IEditorGroupsService } from 'vscode/vscode/vs/workbench/services/editor/common/editorGroupsService';
import { IInstantiationService } from 'monaco-editor/esm/vs/platform/instantiation/common/instantiation.js';
import { IContextKeyService } from 'monaco-editor/esm/vs/platform/contextkey/common/contextkey.js';
import { MonacoEditorService, MonacoDelegateEditorGroupsService } from './tools/editor.js';
import { unsupported } from './tools.js';
import 'vscode/vscode/vs/workbench/browser/parts/editor/editor.contribution';

class EmptyEditorGroup {
    constructor() {
        this.onDidFocus = Event.None;
        this.onDidOpenEditorFail = Event.None;
        this.whenRestored = Promise.resolve();
        this.disposed = false;
        this.setActive = unsupported;
        this.notifyIndexChanged = unsupported;
        this.relayout = unsupported;
        this.dispose = unsupported;
        this.toJSON = unsupported;
        this.minimumWidth = 0;
        this.maximumWidth = Number.POSITIVE_INFINITY;
        this.minimumHeight = 0;
        this.maximumHeight = Number.POSITIVE_INFINITY;
        this.onDidChange = Event.None;
        this.layout = unsupported;
        this.onDidModelChange = Event.None;
        this.onWillDispose = Event.None;
        this.onDidActiveEditorChange = Event.None;
        this.onWillCloseEditor = Event.None;
        this.onDidCloseEditor = Event.None;
        this.onWillMoveEditor = Event.None;
        this.onWillOpenEditor = Event.None;
        this.id = 0;
        this.index = 0;
        this.label = 'main';
        this.ariaLabel = 'main';
        this.activeEditorPane = undefined;
        this.activeEditor = null;
        this.previewEditor = null;
        this.count = 0;
        this.isEmpty = false;
        this.isLocked = false;
        this.stickyCount = 0;
        this.editors = [];
        this.getEditors = () => [];
        this.findEditors = () => [];
        this.getEditorByIndex = () => undefined;
        this.getIndexOfEditor = unsupported;
        this.openEditor = unsupported;
        this.openEditors = unsupported;
        this.isPinned = () => false;
        this.isSticky = () => false;
        this.isActive = () => false;
        this.contains = () => false;
        this.moveEditor = unsupported;
        this.moveEditors = unsupported;
        this.copyEditor = unsupported;
        this.copyEditors = unsupported;
        this.closeEditor = unsupported;
        this.closeEditors = unsupported;
        this.closeAllEditors = unsupported;
        this.replaceEditors = unsupported;
        this.pinEditor = () => { };
        this.stickEditor = () => { };
        this.unstickEditor = () => { };
        this.lock = () => { };
        this.isFirst = unsupported;
        this.isLast = unsupported;
    }
    get titleHeight() {
        return unsupported();
    }
    get element() {
        return unsupported();
    }
    get scopedContextKeyService() { return StandaloneServices.get(IContextKeyService); }
    focus() {
    }
}
const fakeActiveGroup = new EmptyEditorGroup();
class EmptyEditorGroupsService {
    constructor() {
        this._serviceBrand = undefined;
        this.getLayout = unsupported;
        this.onDidChangeActiveGroup = Event.None;
        this.onDidAddGroup = Event.None;
        this.onDidRemoveGroup = Event.None;
        this.onDidMoveGroup = Event.None;
        this.onDidActivateGroup = Event.None;
        this.onDidLayout = Event.None;
        this.onDidScroll = Event.None;
        this.onDidChangeGroupIndex = Event.None;
        this.onDidChangeGroupLocked = Event.None;
        this.activeGroup = fakeActiveGroup;
        this.groups = [fakeActiveGroup];
        this.count = 0;
        this.orientation = 0 ;
        this.isReady = false;
        this.whenReady = Promise.resolve();
        this.whenRestored = Promise.resolve();
        this.hasRestorableState = false;
        this.getGroups = () => [];
        this.getGroup = () => undefined;
        this.activateGroup = unsupported;
        this.getSize = unsupported;
        this.setSize = unsupported;
        this.arrangeGroups = unsupported;
        this.applyLayout = unsupported;
        this.centerLayout = unsupported;
        this.isLayoutCentered = () => false;
        this.setGroupOrientation = unsupported;
        this.findGroup = () => undefined;
        this.addGroup = unsupported;
        this.removeGroup = unsupported;
        this.moveGroup = unsupported;
        this.mergeGroup = unsupported;
        this.mergeAllGroups = unsupported;
        this.copyGroup = unsupported;
        this.partOptions = {};
        this.onDidChangeEditorPartOptions = Event.None;
        this.enforcePartOptions = unsupported;
    }
    get contentDimension() { return unsupported(); }
    get sideGroup() { return unsupported(); }
}
let MonacoEditorGroupsService = class MonacoEditorGroupsService extends MonacoDelegateEditorGroupsService {
    constructor(instantiationService) {
        super(instantiationService.createInstance(EmptyEditorGroupsService), instantiationService);
    }
};
MonacoEditorGroupsService = __decorate([
    ( __param(0, IInstantiationService))
], MonacoEditorGroupsService);
( Registry.as(EditorExtensions.EditorFactory)).registerFileEditorFactory({
    typeId: FILE_EDITOR_INPUT_ID,
    createFileEditor: unsupported,
    isFileEditor: (obj) => false
});
function getServiceOverride(openEditor) {
    return {
        [( ICodeEditorService.toString())]: new SyncDescriptor(CodeEditorService, undefined, true),
        [( IEditorService.toString())]: new SyncDescriptor(MonacoEditorService, [openEditor, () => false], true),
        [( ITextEditorService.toString())]: new SyncDescriptor(TextEditorService, [], false),
        [( IEditorGroupsService.toString())]: new SyncDescriptor(MonacoEditorGroupsService)
    };
}

export { MonacoEditorService, getServiceOverride as default };
