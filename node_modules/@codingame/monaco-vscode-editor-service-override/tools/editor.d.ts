import { IEditorPane, IUntypedEditorInput, IUntitledTextResourceEditorInput, IResourceDiffEditorInput, ITextDiffEditorPane } from 'vscode/vscode/vs/workbench/common/editor';
import { ICodeEditor, IDiffEditor } from 'vscode/vscode/vs/editor/browser/editorBrowser';
import { IInstantiationService } from 'vscode/vscode/vs/platform/instantiation/common/instantiation';
import { IReference } from 'vscode/vscode/vs/base/common/lifecycle';
import { IConfigurationService } from 'vscode/vscode/vs/platform/configuration/common/configuration';
import { IEditorOptions, IResourceEditorInput, ITextResourceEditorInput } from 'vscode/vscode/vs/platform/editor/common/editor';
import { IFileService } from 'vscode/vscode/vs/platform/files/common/files';
import { IWorkspaceContextService } from 'vscode/vscode/vs/platform/workspace/common/workspace';
import { IUriIdentityService } from 'vscode/vscode/vs/platform/uriIdentity/common/uriIdentity';
import { IResolvedTextEditorModel, ITextModelService } from 'vscode/vscode/vs/editor/common/services/resolverService';
import { PreferredGroup } from 'vscode/vscode/vs/workbench/services/editor/common/editorService';
import { EditorInput } from 'vscode/vscode/vs/workbench/common/editor/editorInput';
import { IHostService } from 'vscode/vscode/vs/workbench/services/host/browser/host';
import { IEditorGroupsService } from 'vscode/vscode/vs/workbench/services/editor/common/editorGroupsService';
import { IEditorResolverService } from 'vscode/vscode/vs/workbench/services/editor/common/editorResolverService';
import { ITextEditorService } from 'vscode/vscode/vs/workbench/services/textfile/common/textEditorService';
import { IWorkspaceTrustRequestService } from 'vscode/vscode/vs/platform/workspace/common/workspaceTrust';
import { EditorService } from 'vscode/vscode/vs/workbench/services/editor/browser/editorService';

type OpenEditor = (modelRef: IReference<IResolvedTextEditorModel>, options: IEditorOptions | undefined, sideBySide?: boolean) => Promise<ICodeEditor | undefined>;
declare class MonacoEditorService extends EditorService {
    private _isEditorPartVisible;
    constructor(_openEditorFallback: OpenEditor | undefined, _isEditorPartVisible: () => boolean, _editorGroupService: IEditorGroupsService, instantiationService: IInstantiationService, fileService: IFileService, configurationService: IConfigurationService, contextService: IWorkspaceContextService, uriIdentityService: IUriIdentityService, editorResolverService: IEditorResolverService, workspaceTrustRequestService: IWorkspaceTrustRequestService, hostService: IHostService, textEditorService: ITextEditorService, textModelService: ITextModelService);
    get activeTextEditorControl(): ICodeEditor | IDiffEditor | undefined;
    openEditor(editor: EditorInput, options?: IEditorOptions, group?: PreferredGroup): Promise<IEditorPane | undefined>;
    openEditor(editor: IUntypedEditorInput, group?: PreferredGroup): Promise<IEditorPane | undefined>;
    openEditor(editor: IResourceEditorInput, group?: PreferredGroup): Promise<IEditorPane | undefined>;
    openEditor(editor: ITextResourceEditorInput | IUntitledTextResourceEditorInput, group?: PreferredGroup): Promise<IEditorPane | undefined>;
    openEditor(editor: IResourceDiffEditorInput, group?: PreferredGroup): Promise<ITextDiffEditorPane | undefined>;
    openEditor(editor: EditorInput | IUntypedEditorInput, optionsOrPreferredGroup?: IEditorOptions | PreferredGroup, preferredGroup?: PreferredGroup): Promise<IEditorPane | undefined>;
}

export { MonacoEditorService, type OpenEditor };
