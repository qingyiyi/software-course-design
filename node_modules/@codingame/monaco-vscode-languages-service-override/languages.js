import { __decorate, __param } from './external/tslib/tslib.es6.js';
import { SyncDescriptor } from 'monaco-editor/esm/vs/platform/instantiation/common/descriptors.js';
import { WorkbenchLanguageService } from 'vscode/vscode/vs/workbench/services/language/common/languageService';
import { LanguageConfigurationFileHandler } from 'vscode/vscode/vs/workbench/contrib/codeEditor/browser/languageConfigurationExtensionPoint';
import { Extensions } from 'vscode/vscode/vs/workbench/common/contributions';
import { Registry } from 'monaco-editor/esm/vs/platform/registry/common/platform.js';
import { IInstantiationService } from 'monaco-editor/esm/vs/platform/instantiation/common/instantiation.js';
import { ILanguageService } from 'monaco-editor/esm/vs/editor/common/languages/language.js';
import getServiceOverride$1 from '@codingame/monaco-vscode-files-service-override';

let ExtensionPoints = class ExtensionPoints {
    constructor(instantiationService) {
        this.instantiationService = instantiationService;
        this.instantiationService.createInstance(LanguageConfigurationFileHandler);
    }
};
ExtensionPoints = __decorate([
    ( __param(0, IInstantiationService))
], ExtensionPoints);
( Registry.as(Extensions.Workbench)).registerWorkbenchContribution(ExtensionPoints, 1 );
function getServiceOverride() {
    return {
        ...getServiceOverride$1(),
        [( ILanguageService.toString())]: new SyncDescriptor(WorkbenchLanguageService, [], false)
    };
}

export { ExtensionPoints, getServiceOverride as default };
