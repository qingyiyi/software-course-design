import { __decorate, __param } from './external/tslib/tslib.es6.js';
import { StandaloneServices } from 'monaco-editor/esm/vs/editor/standalone/browser/standaloneServices.js';
import { ITextMateTokenizationService } from 'vscode/vscode/vs/workbench/services/textMate/browser/textMateTokenizationFeature';
export { ITextMateTokenizationService } from 'vscode/vscode/vs/workbench/services/textMate/browser/textMateTokenizationFeature';
import { SyncDescriptor } from 'monaco-editor/esm/vs/platform/instantiation/common/descriptors.js';
import { TextMateTokenizationFeature } from './vscode/src/vs/workbench/services/textMate/browser/textMateTokenizationFeatureImpl.js';
import { TokenClassificationExtensionPoints } from 'vscode/vscode/vs/workbench/services/themes/common/tokenClassificationExtensionPoint';
import { Extensions } from 'vscode/vscode/vs/workbench/common/contributions';
import { Registry } from 'monaco-editor/esm/vs/platform/registry/common/platform.js';
import { ILifecycleService } from 'vscode/vscode/vs/workbench/services/lifecycle/common/lifecycle';
import { IInstantiationService } from 'monaco-editor/esm/vs/platform/instantiation/common/instantiation.js';
import getServiceOverride$1 from '@codingame/monaco-vscode-files-service-override';
import { registerServiceInitializeParticipant } from 'vscode/lifecycle';
import { registerAssets } from 'vscode/assets';

const _onigWasm = new URL('vscode-oniguruma/release/onig.wasm', import.meta.url).href;
registerAssets({
    'vscode-oniguruma/../onig.wasm': _onigWasm,
    'vs/../../node_modules/vscode-oniguruma/release/onig.wasm': _onigWasm
});
registerServiceInitializeParticipant(async (accessor) => {
    void accessor.get(ILifecycleService).when(2 ).then(() => {
        StandaloneServices.get(ITextMateTokenizationService);
    });
});
let ExtensionPoints = class ExtensionPoints {
    constructor(instantiationService) {
        this.instantiationService = instantiationService;
        this.instantiationService.createInstance(TokenClassificationExtensionPoints);
    }
};
ExtensionPoints = __decorate([
    ( __param(0, IInstantiationService))
], ExtensionPoints);
( Registry.as(Extensions.Workbench)).registerWorkbenchContribution(ExtensionPoints, 1 );
function getServiceOverride() {
    return {
        ...getServiceOverride$1(),
        [( ITextMateTokenizationService.toString())]: new SyncDescriptor(TextMateTokenizationFeature, [], false)
    };
}

export { getServiceOverride as default };
