import { __decorate, __param } from '../../../../../../../external/tslib/tslib.es6.js';
import { IConfigurationService } from 'monaco-editor/esm/vs/platform/configuration/common/configuration.js';
import { OS } from 'monaco-editor/esm/vs/base/common/platform.js';
import { Schemas } from 'monaco-editor/esm/vs/base/common/network.js';
import { IStorageService } from 'monaco-editor/esm/vs/platform/storage/common/storage.js';
import { IWorkbenchEnvironmentService } from 'vscode/vscode/vs/workbench/services/environment/common/environmentService';
import { IRemoteAgentService } from 'vscode/vscode/vs/workbench/services/remote/common/remoteAgentService';

let TextResourcePropertiesService = class TextResourcePropertiesService {
    constructor(configurationService, remoteAgentService, environmentService, storageService) {
        this.configurationService = configurationService;
        this.environmentService = environmentService;
        this.storageService = storageService;
        this.remoteEnvironment = null;
        remoteAgentService.getEnvironment().then(remoteEnv => this.remoteEnvironment = remoteEnv);
    }
    getEOL(resource, language) {
        const eol = this.configurationService.getValue('files.eol', { overrideIdentifier: language, resource });
        if (eol && typeof eol === 'string' && eol !== 'auto') {
            return eol;
        }
        const os = this.getOS(resource);
        return os === 3  || os === 2  ? '\n' : '\r\n';
    }
    getOS(resource) {
        let os = OS;
        const remoteAuthority = this.environmentService.remoteAuthority;
        if (remoteAuthority) {
            if (resource && resource.scheme !== Schemas.file) {
                const osCacheKey = `resource.authority.os.${remoteAuthority}`;
                os = this.remoteEnvironment ? this.remoteEnvironment.os :  this.storageService.getNumber(osCacheKey, 1 , OS);
                this.storageService.store(osCacheKey, os, 1 , 1 );
            }
        }
        return os;
    }
};
TextResourcePropertiesService = ( __decorate([
    ( __param(0, IConfigurationService)),
    ( __param(1, IRemoteAgentService)),
    ( __param(2, IWorkbenchEnvironmentService)),
    ( __param(3, IStorageService))
], TextResourcePropertiesService));

export { TextResourcePropertiesService };
