import { __decorate, __param } from '../../../../../../external/tslib/tslib.es6.js';
import { localizeWithPath } from 'monaco-editor/esm/vs/nls.js';
import { Registry } from 'monaco-editor/esm/vs/platform/registry/common/platform.js';
import { DisposableStore } from 'monaco-editor/esm/vs/base/common/lifecycle.js';
import { IKeybindingService } from 'monaco-editor/esm/vs/platform/keybinding/common/keybinding.js';
import { Extensions } from 'monaco-editor/esm/vs/platform/quickinput/common/quickAccess.js';
import { IQuickInputService } from 'monaco-editor/esm/vs/platform/quickinput/common/quickInput.js';

var HelpQuickAccessProvider_1;
let HelpQuickAccessProvider = class HelpQuickAccessProvider {
    static { HelpQuickAccessProvider_1 = this; }
    static { this.PREFIX = '?'; }
    constructor(quickInputService, keybindingService) {
        this.quickInputService = quickInputService;
        this.keybindingService = keybindingService;
        this.registry = ( Registry.as(Extensions.Quickaccess));
    }
    provide(picker) {
        const disposables = ( new DisposableStore());
        disposables.add(picker.onDidAccept(() => {
            const [item] = picker.selectedItems;
            if (item) {
                this.quickInputService.quickAccess.show(item.prefix, { preserveValue: true });
            }
        }));
        disposables.add(picker.onDidChangeValue(value => {
            const providerDescriptor = this.registry.getQuickAccessProvider(value.substr(HelpQuickAccessProvider_1.PREFIX.length));
            if (providerDescriptor && providerDescriptor.prefix && providerDescriptor.prefix !== HelpQuickAccessProvider_1.PREFIX) {
                this.quickInputService.quickAccess.show(providerDescriptor.prefix, { preserveValue: true });
            }
        }));
        picker.items = this.getQuickAccessProviders().filter(p => p.prefix !== HelpQuickAccessProvider_1.PREFIX);
        return disposables;
    }
    getQuickAccessProviders() {
        const providers = this.registry
            .getQuickAccessProviders()
            .sort((providerA, providerB) => providerA.prefix.localeCompare(providerB.prefix))
            .flatMap(provider => this.createPicks(provider));
        return providers;
    }
    createPicks(provider) {
        return ( provider.helpEntries.map(helpEntry => {
            const prefix = helpEntry.prefix || provider.prefix;
            const label = prefix || '\u2026' ;
            return {
                prefix,
                label,
                keybinding: helpEntry.commandId ? this.keybindingService.lookupKeybinding(helpEntry.commandId) : undefined,
                ariaLabel: ( localizeWithPath(
                    'vs/platform/quickinput/browser/helpQuickAccess',
                    'helpPickAriaLabel',
                    "{0}, {1}",
                    label,
                    helpEntry.description
                )),
                description: helpEntry.description
            };
        }));
    }
};
HelpQuickAccessProvider = HelpQuickAccessProvider_1 = ( __decorate([
    ( __param(0, IQuickInputService)),
    ( __param(1, IKeybindingService))
], HelpQuickAccessProvider));

export { HelpQuickAccessProvider };
