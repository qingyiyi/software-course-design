import { ServiceIdentifier } from '../../instantiation/common/instantiation.js';
import { Event } from '../../../base/common/event.js';
import { URI } from '../../../base/common/uri.js';
import { IWorkspaceBackupInfo, IFolderBackupInfo } from '../../backup/common/backup.js';
import { IBaseWorkspace, IRawFileWorkspaceFolder, IRawUriWorkspaceFolder, IWorkspaceIdentifier } from '../../workspace/common/workspace.js';

declare const IWorkspacesService: ServiceIdentifier<IWorkspacesService>;
interface IWorkspacesService {
    readonly _serviceBrand: undefined;
    enterWorkspace(workspaceUri: URI): Promise<IEnterWorkspaceResult | undefined>;
    createUntitledWorkspace(folders?: IWorkspaceFolderCreationData[], remoteAuthority?: string): Promise<IWorkspaceIdentifier>;
    deleteUntitledWorkspace(workspace: IWorkspaceIdentifier): Promise<void>;
    getWorkspaceIdentifier(workspaceUri: URI): Promise<IWorkspaceIdentifier>;
    readonly onDidChangeRecentlyOpened: Event<void>;
    addRecentlyOpened(recents: IRecent[]): Promise<void>;
    removeRecentlyOpened(workspaces: URI[]): Promise<void>;
    clearRecentlyOpened(): Promise<void>;
    getRecentlyOpened(): Promise<IRecentlyOpened>;
    getDirtyWorkspaces(): Promise<Array<IWorkspaceBackupInfo | IFolderBackupInfo>>;
}
interface IRecentlyOpened {
    workspaces: Array<IRecentWorkspace | IRecentFolder>;
    files: IRecentFile[];
}
type IRecent = IRecentWorkspace | IRecentFolder | IRecentFile;
interface IRecentWorkspace {
    readonly workspace: IWorkspaceIdentifier;
    label?: string;
    readonly remoteAuthority?: string;
}
interface IRecentFolder {
    readonly folderUri: URI;
    label?: string;
    readonly remoteAuthority?: string;
}
interface IRecentFile {
    readonly fileUri: URI;
    label?: string;
    readonly remoteAuthority?: string;
}
type IStoredWorkspaceFolder = IRawFileWorkspaceFolder | IRawUriWorkspaceFolder;
interface IStoredWorkspace extends IBaseWorkspace {
    folders: IStoredWorkspaceFolder[];
}
interface IWorkspaceFolderCreationData {
    readonly uri: URI;
    readonly name?: string;
}
interface IEnterWorkspaceResult {
    readonly workspace: IWorkspaceIdentifier;
    readonly backupPath?: string;
}

export { type IEnterWorkspaceResult, type IRecent, type IRecentFile, type IRecentFolder, type IRecentWorkspace, type IRecentlyOpened, type IStoredWorkspace, type IStoredWorkspaceFolder, type IWorkspaceFolderCreationData, IWorkspacesService };
