import { basename } from 'monaco-editor/esm/vs/base/common/resources.js';
import Severity from 'monaco-editor/esm/vs/base/common/severity.js';
import { localizeWithPath } from 'monaco-editor/esm/vs/nls.js';
import { createDecorator } from 'monaco-editor/esm/vs/platform/instantiation/common/instantiation.js';
const IDialogService = ( createDecorator('dialogService'));
var DialogKind;
( (function(DialogKind) {
    DialogKind[DialogKind["Confirmation"] = 1] = "Confirmation";
    DialogKind[DialogKind["Prompt"] = 2] = "Prompt";
    DialogKind[DialogKind["Input"] = 3] = "Input";
})(DialogKind || (DialogKind = {})));
class AbstractDialogHandler {
    getConfirmationButtons(dialog) {
        return this.getButtons(dialog, DialogKind.Confirmation);
    }
    getPromptButtons(dialog) {
        return this.getButtons(dialog, DialogKind.Prompt);
    }
    getInputButtons(dialog) {
        return this.getButtons(dialog, DialogKind.Input);
    }
    getButtons(dialog, kind) {
        const buttons = [];
        switch (kind) {
            case DialogKind.Confirmation: {
                const confirmationDialog = dialog;
                if (confirmationDialog.primaryButton) {
                    buttons.push(confirmationDialog.primaryButton);
                }
                else {
                    buttons.push(( localizeWithPath(
                        'vs/platform/dialogs/common/dialogs',
                        { key: 'yesButton', comment: ['&& denotes a mnemonic'] },
                        "&&Yes"
                    )));
                }
                if (confirmationDialog.cancelButton) {
                    buttons.push(confirmationDialog.cancelButton);
                }
                else {
                    buttons.push(( localizeWithPath('vs/platform/dialogs/common/dialogs', 'cancelButton', "Cancel")));
                }
                break;
            }
            case DialogKind.Prompt: {
                const promptDialog = dialog;
                if (Array.isArray(promptDialog.buttons) && promptDialog.buttons.length > 0) {
                    buttons.push(...( promptDialog.buttons.map(button => button.label)));
                }
                if (promptDialog.cancelButton) {
                    if (promptDialog.cancelButton === true) {
                        buttons.push(( localizeWithPath('vs/platform/dialogs/common/dialogs', 'cancelButton', "Cancel")));
                    }
                    else if (typeof promptDialog.cancelButton === 'string') {
                        buttons.push(promptDialog.cancelButton);
                    }
                    else {
                        if (promptDialog.cancelButton.label) {
                            buttons.push(promptDialog.cancelButton.label);
                        }
                        else {
                            buttons.push(( localizeWithPath('vs/platform/dialogs/common/dialogs', 'cancelButton', "Cancel")));
                        }
                    }
                }
                if (buttons.length === 0) {
                    buttons.push(( localizeWithPath(
                        'vs/platform/dialogs/common/dialogs',
                        { key: 'okButton', comment: ['&& denotes a mnemonic'] },
                        "&&OK"
                    )));
                }
                break;
            }
            case DialogKind.Input: {
                const inputDialog = dialog;
                if (inputDialog.primaryButton) {
                    buttons.push(inputDialog.primaryButton);
                }
                else {
                    buttons.push(( localizeWithPath(
                        'vs/platform/dialogs/common/dialogs',
                        { key: 'okButton', comment: ['&& denotes a mnemonic'] },
                        "&&OK"
                    )));
                }
                if (inputDialog.cancelButton) {
                    buttons.push(inputDialog.cancelButton);
                }
                else {
                    buttons.push(( localizeWithPath('vs/platform/dialogs/common/dialogs', 'cancelButton', "Cancel")));
                }
                break;
            }
        }
        return buttons;
    }
    getDialogType(type) {
        if (typeof type === 'string') {
            return type;
        }
        if (typeof type === 'number') {
            return (type === Severity.Info) ? 'info' : (type === Severity.Error) ? 'error' : (type === Severity.Warning) ? 'warning' : 'none';
        }
        return undefined;
    }
    async getPromptResult(prompt, buttonIndex, checkboxChecked) {
        const promptButtons = [...(prompt.buttons ?? [])];
        if (prompt.cancelButton && typeof prompt.cancelButton !== 'string' && typeof prompt.cancelButton !== 'boolean') {
            promptButtons.push(prompt.cancelButton);
        }
        const result = await promptButtons[buttonIndex]?.run({ checkboxChecked });
        return { result, checkboxChecked };
    }
}
const IFileDialogService = ( createDecorator('fileDialogService'));
const MAX_CONFIRM_FILES = 10;
function getFileNamesMessage(fileNamesOrResources) {
    const message = [];
    message.push(...( fileNamesOrResources.slice(0, MAX_CONFIRM_FILES).map(
        fileNameOrResource => typeof fileNameOrResource === 'string' ? fileNameOrResource : basename(fileNameOrResource)
    )));
    if (fileNamesOrResources.length > MAX_CONFIRM_FILES) {
        if (fileNamesOrResources.length - MAX_CONFIRM_FILES === 1) {
            message.push(( localizeWithPath(
                'vs/platform/dialogs/common/dialogs',
                'moreFile',
                "...1 additional file not shown"
            )));
        }
        else {
            message.push(( localizeWithPath(
                'vs/platform/dialogs/common/dialogs',
                'moreFiles',
                "...{0} additional files not shown",
                fileNamesOrResources.length - MAX_CONFIRM_FILES
            )));
        }
    }
    message.push('');
    return message.join('\n');
}
export { AbstractDialogHandler, IDialogService, IFileDialogService, getFileNamesMessage };
