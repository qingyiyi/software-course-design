import { ServiceIdentifier } from '../../instantiation/common/instantiation.js';
import { IDisposable } from '../../../base/common/lifecycle.js';
import { ISocket } from '../../../base/parts/ipc/common/ipc.net.js';
import { RemoteConnectionType, RemoteConnection, RemoteConnectionOfType } from './remoteAuthorityResolver.js';

declare const IRemoteSocketFactoryService: ServiceIdentifier<IRemoteSocketFactoryService>;
interface IRemoteSocketFactoryService {
    readonly _serviceBrand: undefined;
    /**
     * Register a socket factory for the given message passing type
     * @param type passing type to register for
     * @param factory function that returns the socket factory, or undefined if
     * it can't handle the data.
     */
    register<T extends RemoteConnectionType>(type: T, factory: ISocketFactory<T>): IDisposable;
    connect(connectTo: RemoteConnection, path: string, query: string, debugLabel: string): Promise<ISocket>;
}
interface ISocketFactory<T extends RemoteConnectionType> {
    supports(connectTo: RemoteConnectionOfType<T>): boolean;
    connect(connectTo: RemoteConnectionOfType<T>, path: string, query: string, debugLabel: string): Promise<ISocket>;
}

export { IRemoteSocketFactoryService, type ISocketFactory };
