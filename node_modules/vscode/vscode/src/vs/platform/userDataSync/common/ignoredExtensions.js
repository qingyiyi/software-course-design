import { __decorate, __param } from '../../../../../../external/tslib/tslib.es6.js';
import { distinct } from 'monaco-editor/esm/vs/base/common/arrays.js';
import { IConfigurationService } from 'monaco-editor/esm/vs/platform/configuration/common/configuration.js';
import { createDecorator } from 'monaco-editor/esm/vs/platform/instantiation/common/instantiation.js';
const IIgnoredExtensionsManagementService = ( createDecorator('IIgnoredExtensionsManagementService'));
let IgnoredExtensionsManagementService = class IgnoredExtensionsManagementService {
    constructor(configurationService) {
        this.configurationService = configurationService;
    }
    hasToNeverSyncExtension(extensionId) {
        const configuredIgnoredExtensions = this.getConfiguredIgnoredExtensions();
        return configuredIgnoredExtensions.includes(extensionId.toLowerCase());
    }
    hasToAlwaysSyncExtension(extensionId) {
        const configuredIgnoredExtensions = this.getConfiguredIgnoredExtensions();
        return configuredIgnoredExtensions.includes(`-${extensionId.toLowerCase()}`);
    }
    updateIgnoredExtensions(ignoredExtensionId, ignore) {
        let currentValue = ( [...this.configurationService.getValue('settingsSync.ignoredExtensions')].map(id => id.toLowerCase()));
        currentValue = currentValue.filter(v => v !== ignoredExtensionId && v !== `-${ignoredExtensionId}`);
        if (ignore) {
            currentValue.push(ignoredExtensionId.toLowerCase());
        }
        return this.configurationService.updateValue('settingsSync.ignoredExtensions', currentValue.length ? currentValue : undefined, 2 );
    }
    updateSynchronizedExtensions(extensionId, sync) {
        let currentValue = ( [...this.configurationService.getValue('settingsSync.ignoredExtensions')].map(id => id.toLowerCase()));
        currentValue = currentValue.filter(v => v !== extensionId && v !== `-${extensionId}`);
        if (sync) {
            currentValue.push(`-${extensionId.toLowerCase()}`);
        }
        return this.configurationService.updateValue('settingsSync.ignoredExtensions', currentValue.length ? currentValue : undefined, 2 );
    }
    getIgnoredExtensions(installed) {
        const defaultIgnoredExtensions = ( installed.filter(i => i.isMachineScoped).map(i => i.identifier.id.toLowerCase()));
        const value = ( this.getConfiguredIgnoredExtensions().map(id => id.toLowerCase()));
        const added = [], removed = [];
        if (Array.isArray(value)) {
            for (const key of value) {
                if (key.startsWith('-')) {
                    removed.push(key.substring(1));
                }
                else {
                    added.push(key);
                }
            }
        }
        return distinct([...defaultIgnoredExtensions, ...added,].filter(setting => !removed.includes(setting)));
    }
    getConfiguredIgnoredExtensions() {
        let userValue = this.configurationService.inspect('settingsSync.ignoredExtensions').userValue;
        if (userValue !== undefined) {
            return userValue;
        }
        userValue = this.configurationService.inspect('sync.ignoredExtensions').userValue;
        if (userValue !== undefined) {
            return userValue;
        }
        return ( (this.configurationService.getValue('settingsSync.ignoredExtensions') || []).map(id => id.toLowerCase()));
    }
};
IgnoredExtensionsManagementService = ( __decorate([
    ( __param(0, IConfigurationService))
], IgnoredExtensionsManagementService));
export { IIgnoredExtensionsManagementService, IgnoredExtensionsManagementService };
