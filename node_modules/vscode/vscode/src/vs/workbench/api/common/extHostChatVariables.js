import { toDisposable } from 'monaco-editor/esm/vs/base/common/lifecycle.js';
import { MainContext } from './extHost.protocol.js';
import { onUnexpectedExternalError } from 'monaco-editor/esm/vs/base/common/errors.js';
import { ChatVariable } from './extHostTypeConverters.js';
class ExtHostChatVariables {
    static { this._idPool = 0; }
    constructor(mainContext) {
        this._resolver = ( new Map());
        this._proxy = ( mainContext.getProxy(MainContext.MainThreadChatVariables));
    }
    async $resolveVariable(handle, messageText, token) {
        const item = this._resolver.get(handle);
        if (!item) {
            return undefined;
        }
        try {
            const value = await item.resolver.resolve(item.data.name, { message: messageText }, token);
            if (value) {
                return ( value.map(ChatVariable.from));
            }
        }
        catch (err) {
            onUnexpectedExternalError(err);
        }
        return undefined;
    }
    registerVariableResolver(extension, name, description, resolver) {
        const handle = ExtHostChatVariables._idPool++;
        this._resolver.set(handle, { extension: extension.identifier, data: { name, description }, resolver: resolver });
        this._proxy.$registerVariable(handle, { name, description });
        return toDisposable(() => {
            this._resolver.delete(handle);
            this._proxy.$unregisterVariable(handle);
        });
    }
}
export { ExtHostChatVariables };
