import { localizeWithPath } from 'monaco-editor/esm/vs/nls.js';
import { registerAction2, Action2, MenuId } from 'monaco-editor/esm/vs/platform/actions/common/actions.js';
import { Categories } from 'monaco-editor/esm/vs/platform/action/common/actionCommonCategories.js';
import { IConfigurationService } from 'monaco-editor/esm/vs/platform/configuration/common/configuration.js';
import { IWorkbenchLayoutService, positionToString } from '../../services/layout/browser/layoutService.js';
import { IInstantiationService } from 'monaco-editor/esm/vs/platform/instantiation/common/instantiation.js';
import { KeyChord } from 'monaco-editor/esm/vs/base/common/keyCodes.js';
import { isWindows, isLinux, isWeb, isMacintosh, isNative } from 'monaco-editor/esm/vs/base/common/platform.js';
import { IsMacNativeContext } from 'monaco-editor/esm/vs/platform/contextkey/common/contextkeys.js';
import { KeybindingsRegistry } from 'monaco-editor/esm/vs/platform/keybinding/common/keybindingsRegistry.js';
import { ContextKeyExpr, IContextKeyService } from 'monaco-editor/esm/vs/platform/contextkey/common/contextkey.js';
import { IViewDescriptorService, IViewsService } from '../../common/views.js';
import { IQuickInputService } from 'monaco-editor/esm/vs/platform/quickinput/common/quickInput.js';
import '../../../../../../override/vs/platform/dialogs/common/dialogs.js';
import { IPaneCompositePartService } from '../../services/panecomposite/browser/panecomposite.js';
import { ToggleAuxiliaryBarAction } from '../parts/auxiliarybar/auxiliaryBarActions.js';
import { TogglePanelAction } from '../parts/panel/panelActions.js';
import { ICommandService } from 'monaco-editor/esm/vs/platform/commands/common/commands.js';
import { IsCenteredLayoutContext, EditorAreaVisibleContext, PanelAlignmentContext, PanelPositionContext, SideBarVisibleContext, InEditorZenModeContext, FocusedViewContext, AuxiliaryBarVisibleContext, PanelVisibleContext, IsFullscreenContext } from '../../common/contextkeys.js';
import { Codicon } from 'monaco-editor/esm/vs/base/common/codicons.js';
import { ThemeIcon } from 'monaco-editor/esm/vs/base/common/themables.js';
import { DisposableStore } from 'monaco-editor/esm/vs/base/common/lifecycle.js';
import { registerIcon } from 'monaco-editor/esm/vs/platform/theme/common/iconRegistry.js';
import { IDialogService } from '../../../platform/dialogs/common/dialogs.js';
const menubarIcon = registerIcon('menuBar', Codicon.layoutMenubar, ( localizeWithPath(
    'vs/workbench/browser/actions/layoutActions',
    'menuBarIcon',
    "Represents the menu bar"
)));
const activityBarLeftIcon = registerIcon('activity-bar-left', Codicon.layoutActivitybarLeft, ( localizeWithPath(
    'vs/workbench/browser/actions/layoutActions',
    'activityBarLeft',
    "Represents the activity bar in the left position"
)));
const activityBarRightIcon = registerIcon('activity-bar-right', Codicon.layoutActivitybarRight, ( localizeWithPath(
    'vs/workbench/browser/actions/layoutActions',
    'activityBarRight',
    "Represents the activity bar in the right position"
)));
const panelLeftIcon = registerIcon('panel-left', Codicon.layoutSidebarLeft, ( localizeWithPath(
    'vs/workbench/browser/actions/layoutActions',
    'panelLeft',
    "Represents a side bar in the left position"
)));
registerIcon('panel-left-off', Codicon.layoutSidebarLeftOff, ( localizeWithPath(
    'vs/workbench/browser/actions/layoutActions',
    'panelLeftOff',
    "Represents a side bar in the left position toggled off"
)));
const panelRightIcon = registerIcon('panel-right', Codicon.layoutSidebarRight, ( localizeWithPath(
    'vs/workbench/browser/actions/layoutActions',
    'panelRight',
    "Represents side bar in the right position"
)));
registerIcon('panel-right-off', Codicon.layoutSidebarRightOff, ( localizeWithPath(
    'vs/workbench/browser/actions/layoutActions',
    'panelRightOff',
    "Represents side bar in the right position toggled off"
)));
const panelIcon = registerIcon('panel-bottom', Codicon.layoutPanel, ( localizeWithPath(
    'vs/workbench/browser/actions/layoutActions',
    'panelBottom',
    "Represents the bottom panel"
)));
const statusBarIcon = registerIcon('statusBar', Codicon.layoutStatusbar, ( localizeWithPath(
    'vs/workbench/browser/actions/layoutActions',
    'statusBarIcon',
    "Represents the status bar"
)));
const panelAlignmentLeftIcon = registerIcon('panel-align-left', Codicon.layoutPanelLeft, ( localizeWithPath(
    'vs/workbench/browser/actions/layoutActions',
    'panelBottomLeft',
    "Represents the bottom panel alignment set to the left"
)));
const panelAlignmentRightIcon = registerIcon('panel-align-right', Codicon.layoutPanelRight, ( localizeWithPath(
    'vs/workbench/browser/actions/layoutActions',
    'panelBottomRight',
    "Represents the bottom panel alignment set to the right"
)));
const panelAlignmentCenterIcon = registerIcon('panel-align-center', Codicon.layoutPanelCenter, ( localizeWithPath(
    'vs/workbench/browser/actions/layoutActions',
    'panelBottomCenter',
    "Represents the bottom panel alignment set to the center"
)));
const panelAlignmentJustifyIcon = registerIcon('panel-align-justify', Codicon.layoutPanelJustify, ( localizeWithPath(
    'vs/workbench/browser/actions/layoutActions',
    'panelBottomJustify',
    "Represents the bottom panel alignment set to justified"
)));
const fullscreenIcon = registerIcon('fullscreen', Codicon.screenFull, ( localizeWithPath(
    'vs/workbench/browser/actions/layoutActions',
    'fullScreenIcon',
    "Represents full screen"
)));
const centerLayoutIcon = registerIcon('centerLayoutIcon', Codicon.layoutCentered, ( localizeWithPath(
    'vs/workbench/browser/actions/layoutActions',
    'centerLayoutIcon',
    "Represents centered layout mode"
)));
const zenModeIcon = registerIcon('zenMode', Codicon.target, ( localizeWithPath(
    'vs/workbench/browser/actions/layoutActions',
    'zenModeIcon',
    "Represents zen mode"
)));
registerAction2(class extends Action2 {
    constructor() {
        super({
            id: 'workbench.action.closeSidebar',
            title: { value: ( localizeWithPath(
                'vs/workbench/browser/actions/layoutActions',
                'closeSidebar',
                "Close Primary Side Bar"
            )), original: 'Close Primary Side Bar' },
            category: Categories.View,
            f1: true
        });
    }
    run(accessor) {
        accessor.get(IWorkbenchLayoutService).setPartHidden(true, "workbench.parts.sidebar" );
    }
});
class ToggleActivityBarVisibilityAction extends Action2 {
    static { this.ID = 'workbench.action.toggleActivityBarVisibility'; }
    static { this.activityBarVisibleKey = 'workbench.activityBar.visible'; }
    constructor() {
        super({
            id: ToggleActivityBarVisibilityAction.ID,
            title: {
                value: ( localizeWithPath(
                    'vs/workbench/browser/actions/layoutActions',
                    'toggleActivityBar',
                    "Toggle Activity Bar Visibility"
                )),
                mnemonicTitle: ( localizeWithPath(
                    'vs/workbench/browser/actions/layoutActions',
                    { key: 'miActivityBar', comment: ['&& denotes a mnemonic'] },
                    "&&Activity Bar"
                )),
                original: 'Toggle Activity Bar Visibility'
            },
            category: Categories.View,
            f1: true,
            toggled: ( ContextKeyExpr.equals('config.workbench.activityBar.visible', true)),
            menu: [{
                    id: MenuId.MenubarAppearanceMenu,
                    group: '2_workbench_layout',
                    order: 4
                }]
        });
    }
    run(accessor) {
        const layoutService = accessor.get(IWorkbenchLayoutService);
        const configurationService = accessor.get(IConfigurationService);
        const visibility = layoutService.isVisible("workbench.parts.activitybar" );
        const newVisibilityValue = !visibility;
        configurationService.updateValue(ToggleActivityBarVisibilityAction.activityBarVisibleKey, newVisibilityValue);
    }
}
registerAction2(ToggleActivityBarVisibilityAction);
registerAction2(class extends Action2 {
    constructor() {
        super({
            id: 'workbench.action.toggleCenteredLayout',
            title: {
                value: ( localizeWithPath(
                    'vs/workbench/browser/actions/layoutActions',
                    'toggleCenteredLayout',
                    "Toggle Centered Layout"
                )),
                mnemonicTitle: ( localizeWithPath(
                    'vs/workbench/browser/actions/layoutActions',
                    { key: 'miToggleCenteredLayout', comment: ['&& denotes a mnemonic'] },
                    "&&Centered Layout"
                )),
                original: 'Toggle Centered Layout'
            },
            category: Categories.View,
            f1: true,
            toggled: IsCenteredLayoutContext,
            menu: [{
                    id: MenuId.MenubarAppearanceMenu,
                    group: '1_toggle_view',
                    order: 3
                }]
        });
    }
    run(accessor) {
        const layoutService = accessor.get(IWorkbenchLayoutService);
        layoutService.centerEditorLayout(!layoutService.isEditorLayoutCentered());
    }
});
const sidebarPositionConfigurationKey = 'workbench.sideBar.location';
class MoveSidebarPositionAction extends Action2 {
    constructor(id, title, position) {
        super({
            id,
            title,
            f1: false
        });
        this.position = position;
    }
    async run(accessor) {
        const layoutService = accessor.get(IWorkbenchLayoutService);
        const configurationService = accessor.get(IConfigurationService);
        const position = layoutService.getSideBarPosition();
        if (position !== this.position) {
            return configurationService.updateValue(sidebarPositionConfigurationKey, positionToString(this.position));
        }
    }
}
class MoveSidebarRightAction extends MoveSidebarPositionAction {
    static { this.ID = 'workbench.action.moveSideBarRight'; }
    constructor() {
        super(MoveSidebarRightAction.ID, {
            value: ( localizeWithPath(
                'vs/workbench/browser/actions/layoutActions',
                'moveSidebarRight',
                "Move Primary Side Bar Right"
            )),
            original: 'Move Primary Side Bar Right'
        }, 1 );
    }
}
class MoveSidebarLeftAction extends MoveSidebarPositionAction {
    static { this.ID = 'workbench.action.moveSideBarLeft'; }
    constructor() {
        super(MoveSidebarLeftAction.ID, {
            value: ( localizeWithPath(
                'vs/workbench/browser/actions/layoutActions',
                'moveSidebarLeft',
                "Move Primary Side Bar Left"
            )),
            original: 'Move Primary Side Bar Left'
        }, 0 );
    }
}
registerAction2(MoveSidebarRightAction);
registerAction2(MoveSidebarLeftAction);
class ToggleSidebarPositionAction extends Action2 {
    static { this.ID = 'workbench.action.toggleSidebarPosition'; }
    static { this.LABEL = ( localizeWithPath(
        'vs/workbench/browser/actions/layoutActions',
        'toggleSidebarPosition',
        "Toggle Primary Side Bar Position"
    )); }
    static getLabel(layoutService) {
        return layoutService.getSideBarPosition() === 0  ? ( localizeWithPath(
            'vs/workbench/browser/actions/layoutActions',
            'moveSidebarRight',
            "Move Primary Side Bar Right"
        )) : ( localizeWithPath(
            'vs/workbench/browser/actions/layoutActions',
            'moveSidebarLeft',
            "Move Primary Side Bar Left"
        ));
    }
    constructor() {
        super({
            id: ToggleSidebarPositionAction.ID,
            title: { value: ( localizeWithPath(
                'vs/workbench/browser/actions/layoutActions',
                'toggleSidebarPosition',
                "Toggle Primary Side Bar Position"
            )), original: 'Toggle Primary Side Bar Position' },
            category: Categories.View,
            f1: true
        });
    }
    run(accessor) {
        const layoutService = accessor.get(IWorkbenchLayoutService);
        const configurationService = accessor.get(IConfigurationService);
        const position = layoutService.getSideBarPosition();
        const newPositionValue = ((position === 0) ) ? 'right' : 'left';
        return configurationService.updateValue(sidebarPositionConfigurationKey, newPositionValue);
    }
}
registerAction2(ToggleSidebarPositionAction);
const configureLayoutIcon = registerIcon('configure-layout-icon', Codicon.layout, ( localizeWithPath(
    'vs/workbench/browser/actions/layoutActions',
    'cofigureLayoutIcon',
    'Icon represents workbench layout configuration.'
)));
registerAction2(class extends Action2 {
    constructor() {
        super({
            id: 'workbench.action.toggleEditorVisibility',
            title: {
                value: ( localizeWithPath(
                    'vs/workbench/browser/actions/layoutActions',
                    'toggleEditor',
                    "Toggle Editor Area Visibility"
                )),
                mnemonicTitle: ( localizeWithPath(
                    'vs/workbench/browser/actions/layoutActions',
                    { key: 'miShowEditorArea', comment: ['&& denotes a mnemonic'] },
                    "Show &&Editor Area"
                )),
                original: 'Toggle Editor Area Visibility'
            },
            category: Categories.View,
            f1: true,
            toggled: EditorAreaVisibleContext,
            precondition: ( ContextKeyExpr.or(( PanelAlignmentContext.isEqualTo('center')), ( PanelPositionContext.notEqualsTo('bottom'))))
        });
    }
    run(accessor) {
        accessor.get(IWorkbenchLayoutService).toggleMaximizedPanel();
    }
});
class ToggleSidebarVisibilityAction extends Action2 {
    static { this.ID = 'workbench.action.toggleSidebarVisibility'; }
    constructor() {
        super({
            id: ToggleSidebarVisibilityAction.ID,
            title: { value: ( localizeWithPath(
                'vs/workbench/browser/actions/layoutActions',
                'toggleSidebar',
                "Toggle Primary Side Bar Visibility"
            )), original: 'Toggle Primary Side Bar Visibility' },
            toggled: {
                condition: SideBarVisibleContext,
                title: ( localizeWithPath(
                    'vs/workbench/browser/actions/layoutActions',
                    'primary sidebar',
                    "Primary Side Bar"
                )),
                mnemonicTitle: ( localizeWithPath(
                    'vs/workbench/browser/actions/layoutActions',
                    { key: 'primary sidebar mnemonic', comment: ['&& denotes a mnemonic'] },
                    "&&Primary Side Bar"
                )),
            },
            category: Categories.View,
            f1: true,
            keybinding: {
                weight: 200 ,
                primary: 2048  | 32
            },
            menu: [
                {
                    id: MenuId.LayoutControlMenuSubmenu,
                    group: '0_workbench_layout',
                    order: 0
                },
                {
                    id: MenuId.MenubarAppearanceMenu,
                    group: '2_workbench_layout',
                    order: 1
                }
            ]
        });
    }
    run(accessor) {
        const layoutService = accessor.get(IWorkbenchLayoutService);
        layoutService.setPartHidden(layoutService.isVisible("workbench.parts.sidebar" ), "workbench.parts.sidebar" );
    }
}
registerAction2(ToggleSidebarVisibilityAction);
class ToggleStatusbarVisibilityAction extends Action2 {
    static { this.ID = 'workbench.action.toggleStatusbarVisibility'; }
    static { this.statusbarVisibleKey = 'workbench.statusBar.visible'; }
    constructor() {
        super({
            id: ToggleStatusbarVisibilityAction.ID,
            title: {
                value: ( localizeWithPath(
                    'vs/workbench/browser/actions/layoutActions',
                    'toggleStatusbar',
                    "Toggle Status Bar Visibility"
                )),
                mnemonicTitle: ( localizeWithPath(
                    'vs/workbench/browser/actions/layoutActions',
                    { key: 'miStatusbar', comment: ['&& denotes a mnemonic'] },
                    "S&&tatus Bar"
                )),
                original: 'Toggle Status Bar Visibility'
            },
            category: Categories.View,
            f1: true,
            toggled: ( ContextKeyExpr.equals('config.workbench.statusBar.visible', true)),
            menu: [{
                    id: MenuId.MenubarAppearanceMenu,
                    group: '2_workbench_layout',
                    order: 3
                }]
        });
    }
    run(accessor) {
        const layoutService = accessor.get(IWorkbenchLayoutService);
        const configurationService = accessor.get(IConfigurationService);
        const visibility = layoutService.isVisible("workbench.parts.statusbar" );
        const newVisibilityValue = !visibility;
        return configurationService.updateValue(ToggleStatusbarVisibilityAction.statusbarVisibleKey, newVisibilityValue);
    }
}
registerAction2(ToggleStatusbarVisibilityAction);
class BaseToggleBooleanSettingAction extends Action2 {
    run(accessor) {
        const configurationService = accessor.get(IConfigurationService);
        const oldettingValue = configurationService.getValue(this.settingId);
        const newSettingValue = !oldettingValue;
        return configurationService.updateValue(this.settingId, newSettingValue);
    }
}
class ToggleTabsVisibilityAction extends BaseToggleBooleanSettingAction {
    static { this.ID = 'workbench.action.toggleTabsVisibility'; }
    constructor() {
        super({
            id: ToggleTabsVisibilityAction.ID,
            title: {
                value: ( localizeWithPath(
                    'vs/workbench/browser/actions/layoutActions',
                    'toggleTabs',
                    "Toggle Editor Tab Visibility"
                )),
                original: 'Toggle Editor Tab Visibility'
            },
            category: Categories.View,
            f1: true
        });
    }
    get settingId() {
        return 'workbench.editor.showTabs';
    }
}
registerAction2(ToggleTabsVisibilityAction);
class ToggleSeparatePinnedTabsAction extends BaseToggleBooleanSettingAction {
    static { this.ID = 'workbench.action.toggleSeparatePinnedEditorTabs'; }
    constructor() {
        super({
            id: ToggleSeparatePinnedTabsAction.ID,
            title: {
                value: ( localizeWithPath(
                    'vs/workbench/browser/actions/layoutActions',
                    'toggleSeparatePinnedEditorTabs',
                    "Separate Pinned Editor Tabs"
                )),
                original: 'Separate Pinned Editor Tabs'
            },
            category: Categories.View,
            precondition: ( ContextKeyExpr.has('config.workbench.editor.showTabs')),
            f1: true
        });
    }
    get settingId() {
        return 'workbench.editor.pinnedTabsOnSeparateRow';
    }
}
registerAction2(ToggleSeparatePinnedTabsAction);
registerAction2(class extends Action2 {
    constructor() {
        super({
            id: 'workbench.action.toggleZenMode',
            title: {
                value: ( localizeWithPath(
                    'vs/workbench/browser/actions/layoutActions',
                    'toggleZenMode',
                    "Toggle Zen Mode"
                )),
                mnemonicTitle: ( localizeWithPath(
                    'vs/workbench/browser/actions/layoutActions',
                    { key: 'miToggleZenMode', comment: ['&& denotes a mnemonic'] },
                    "Zen Mode"
                )),
                original: 'Toggle Zen Mode'
            },
            category: Categories.View,
            f1: true,
            keybinding: {
                weight: 200 ,
                primary: KeyChord(2048  | 41 , 56 )
            },
            toggled: InEditorZenModeContext,
            menu: [{
                    id: MenuId.MenubarAppearanceMenu,
                    group: '1_toggle_view',
                    order: 2
                }]
        });
    }
    run(accessor) {
        return accessor.get(IWorkbenchLayoutService).toggleZenMode();
    }
});
KeybindingsRegistry.registerCommandAndKeybindingRule({
    id: 'workbench.action.exitZenMode',
    weight: 100  - 1000,
    handler(accessor) {
        const layoutService = accessor.get(IWorkbenchLayoutService);
        const contextKeyService = accessor.get(IContextKeyService);
        if (InEditorZenModeContext.getValue(contextKeyService)) {
            layoutService.toggleZenMode();
        }
    },
    when: InEditorZenModeContext,
    primary: KeyChord(9 , 9 )
});
if (isWindows || isLinux || isWeb) {
    registerAction2(class ToggleMenubarAction extends Action2 {
        constructor() {
            super({
                id: 'workbench.action.toggleMenuBar',
                title: {
                    value: ( localizeWithPath(
                        'vs/workbench/browser/actions/layoutActions',
                        'toggleMenuBar',
                        "Toggle Menu Bar"
                    )),
                    mnemonicTitle: ( localizeWithPath(
                        'vs/workbench/browser/actions/layoutActions',
                        { key: 'miMenuBar', comment: ['&& denotes a mnemonic'] },
                        "Menu &&Bar"
                    )),
                    original: 'Toggle Menu Bar'
                },
                category: Categories.View,
                f1: true,
                toggled: ( ContextKeyExpr.and(( IsMacNativeContext.toNegated()), ( ContextKeyExpr.notEquals('config.window.menuBarVisibility', 'hidden')), ( ContextKeyExpr.notEquals('config.window.menuBarVisibility', 'toggle')), ( ContextKeyExpr.notEquals('config.window.menuBarVisibility', 'compact')))),
                menu: [{
                        id: MenuId.MenubarAppearanceMenu,
                        group: '2_workbench_layout',
                        order: 0
                    }]
            });
        }
        run(accessor) {
            return accessor.get(IWorkbenchLayoutService).toggleMenuBar();
        }
    });
}
registerAction2(class extends Action2 {
    constructor() {
        super({
            id: 'workbench.action.resetViewLocations',
            title: {
                value: ( localizeWithPath(
                    'vs/workbench/browser/actions/layoutActions',
                    'resetViewLocations',
                    "Reset View Locations"
                )),
                original: 'Reset View Locations'
            },
            category: Categories.View,
            f1: true
        });
    }
    run(accessor) {
        return accessor.get(IViewDescriptorService).reset();
    }
});
registerAction2(class extends Action2 {
    constructor() {
        super({
            id: 'workbench.action.moveView',
            title: {
                value: ( localizeWithPath('vs/workbench/browser/actions/layoutActions', 'moveView', "Move View")),
                original: 'Move View'
            },
            category: Categories.View,
            f1: true
        });
    }
    async run(accessor) {
        const viewDescriptorService = accessor.get(IViewDescriptorService);
        const instantiationService = accessor.get(IInstantiationService);
        const quickInputService = accessor.get(IQuickInputService);
        const contextKeyService = accessor.get(IContextKeyService);
        const paneCompositePartService = accessor.get(IPaneCompositePartService);
        const focusedViewId = FocusedViewContext.getValue(contextKeyService);
        let viewId;
        if (focusedViewId && viewDescriptorService.getViewDescriptorById(focusedViewId)?.canMoveView) {
            viewId = focusedViewId;
        }
        try {
            viewId = await this.getView(quickInputService, viewDescriptorService, paneCompositePartService, viewId);
            if (!viewId) {
                return;
            }
            const moveFocusedViewAction = ( new MoveFocusedViewAction());
            instantiationService.invokeFunction(accessor => moveFocusedViewAction.run(accessor, viewId));
        }
        catch { }
    }
    getViewItems(viewDescriptorService, paneCompositePartService) {
        const results = [];
        const viewlets = paneCompositePartService.getVisiblePaneCompositeIds(0 );
        viewlets.forEach(viewletId => {
            const container = viewDescriptorService.getViewContainerById(viewletId);
            const containerModel = viewDescriptorService.getViewContainerModel(container);
            let hasAddedView = false;
            containerModel.visibleViewDescriptors.forEach(viewDescriptor => {
                if (viewDescriptor.canMoveView) {
                    if (!hasAddedView) {
                        results.push({
                            type: 'separator',
                            label: ( localizeWithPath(
                                'vs/workbench/browser/actions/layoutActions',
                                'sidebarContainer',
                                "Side Bar / {0}",
                                containerModel.title
                            ))
                        });
                        hasAddedView = true;
                    }
                    results.push({
                        id: viewDescriptor.id,
                        label: viewDescriptor.name
                    });
                }
            });
        });
        const panels = paneCompositePartService.getPinnedPaneCompositeIds(1 );
        panels.forEach(panel => {
            const container = viewDescriptorService.getViewContainerById(panel);
            const containerModel = viewDescriptorService.getViewContainerModel(container);
            let hasAddedView = false;
            containerModel.visibleViewDescriptors.forEach(viewDescriptor => {
                if (viewDescriptor.canMoveView) {
                    if (!hasAddedView) {
                        results.push({
                            type: 'separator',
                            label: ( localizeWithPath(
                                'vs/workbench/browser/actions/layoutActions',
                                'panelContainer',
                                "Panel / {0}",
                                containerModel.title
                            ))
                        });
                        hasAddedView = true;
                    }
                    results.push({
                        id: viewDescriptor.id,
                        label: viewDescriptor.name
                    });
                }
            });
        });
        const sidePanels = paneCompositePartService.getPinnedPaneCompositeIds(2 );
        sidePanels.forEach(panel => {
            const container = viewDescriptorService.getViewContainerById(panel);
            const containerModel = viewDescriptorService.getViewContainerModel(container);
            let hasAddedView = false;
            containerModel.visibleViewDescriptors.forEach(viewDescriptor => {
                if (viewDescriptor.canMoveView) {
                    if (!hasAddedView) {
                        results.push({
                            type: 'separator',
                            label: ( localizeWithPath(
                                'vs/workbench/browser/actions/layoutActions',
                                'secondarySideBarContainer',
                                "Secondary Side Bar / {0}",
                                containerModel.title
                            ))
                        });
                        hasAddedView = true;
                    }
                    results.push({
                        id: viewDescriptor.id,
                        label: viewDescriptor.name
                    });
                }
            });
        });
        return results;
    }
    async getView(quickInputService, viewDescriptorService, paneCompositePartService, viewId) {
        const quickPick = quickInputService.createQuickPick();
        quickPick.placeholder = ( localizeWithPath(
            'vs/workbench/browser/actions/layoutActions',
            'moveFocusedView.selectView',
            "Select a View to Move"
        ));
        quickPick.items = this.getViewItems(viewDescriptorService, paneCompositePartService);
        quickPick.selectedItems = quickPick.items.filter(item => item.id === viewId);
        return ( new Promise((resolve, reject) => {
            quickPick.onDidAccept(() => {
                const viewId = quickPick.selectedItems[0];
                if (viewId.id) {
                    resolve(viewId.id);
                }
                else {
                    reject();
                }
                quickPick.hide();
            });
            quickPick.onDidHide(() => reject());
            quickPick.show();
        }));
    }
});
class MoveFocusedViewAction extends Action2 {
    constructor() {
        super({
            id: 'workbench.action.moveFocusedView',
            title: {
                value: ( localizeWithPath(
                    'vs/workbench/browser/actions/layoutActions',
                    'moveFocusedView',
                    "Move Focused View"
                )),
                original: 'Move Focused View'
            },
            category: Categories.View,
            precondition: ( FocusedViewContext.notEqualsTo('')),
            f1: true
        });
    }
    run(accessor, viewId) {
        const viewDescriptorService = accessor.get(IViewDescriptorService);
        const viewsService = accessor.get(IViewsService);
        const quickInputService = accessor.get(IQuickInputService);
        const contextKeyService = accessor.get(IContextKeyService);
        const dialogService = accessor.get(IDialogService);
        const paneCompositePartService = accessor.get(IPaneCompositePartService);
        const focusedViewId = viewId || FocusedViewContext.getValue(contextKeyService);
        if (focusedViewId === undefined || focusedViewId.trim() === '') {
            dialogService.error(( localizeWithPath(
                'vs/workbench/browser/actions/layoutActions',
                'moveFocusedView.error.noFocusedView',
                "There is no view currently focused."
            )));
            return;
        }
        const viewDescriptor = viewDescriptorService.getViewDescriptorById(focusedViewId);
        if (!viewDescriptor || !viewDescriptor.canMoveView) {
            dialogService.error(( localizeWithPath(
                'vs/workbench/browser/actions/layoutActions',
                'moveFocusedView.error.nonMovableView',
                "The currently focused view is not movable."
            )));
            return;
        }
        const quickPick = quickInputService.createQuickPick();
        quickPick.placeholder = ( localizeWithPath(
            'vs/workbench/browser/actions/layoutActions',
            'moveFocusedView.selectDestination',
            "Select a Destination for the View"
        ));
        quickPick.title = ( localizeWithPath(
            'vs/workbench/browser/actions/layoutActions',
            { key: 'moveFocusedView.title', comment: ['{0} indicates the title of the view the user has selected to move.'] },
            "View: Move {0}",
            viewDescriptor.name
        ));
        const items = [];
        const currentContainer = viewDescriptorService.getViewContainerByViewId(focusedViewId);
        const currentLocation = viewDescriptorService.getViewLocationById(focusedViewId);
        const isViewSolo = viewDescriptorService.getViewContainerModel(currentContainer).allViewDescriptors.length === 1;
        if (!((isViewSolo && currentLocation === 1) )) {
            items.push({
                id: '_.panel.newcontainer',
                label: ( localizeWithPath(
                    'vs/workbench/browser/actions/layoutActions',
                    { key: 'moveFocusedView.newContainerInPanel', comment: ['Creates a new top-level tab in the panel.'] },
                    "New Panel Entry"
                )),
            });
        }
        if (!((isViewSolo && currentLocation === 0) )) {
            items.push({
                id: '_.sidebar.newcontainer',
                label: ( localizeWithPath(
                    'vs/workbench/browser/actions/layoutActions',
                    'moveFocusedView.newContainerInSidebar',
                    "New Side Bar Entry"
                ))
            });
        }
        if (!((isViewSolo && currentLocation === 2) )) {
            items.push({
                id: '_.auxiliarybar.newcontainer',
                label: ( localizeWithPath(
                    'vs/workbench/browser/actions/layoutActions',
                    'moveFocusedView.newContainerInSidePanel',
                    "New Secondary Side Bar Entry"
                ))
            });
        }
        items.push({
            type: 'separator',
            label: ( localizeWithPath('vs/workbench/browser/actions/layoutActions', 'sidebar', "Side Bar"))
        });
        const pinnedViewlets = paneCompositePartService.getVisiblePaneCompositeIds(0 );
        items.push(...( pinnedViewlets
            .filter(viewletId => {
            if (viewletId === viewDescriptorService.getViewContainerByViewId(focusedViewId).id) {
                return false;
            }
            return !viewDescriptorService.getViewContainerById(viewletId).rejectAddedViews;
        })
            .map(viewletId => {
            return {
                id: viewletId,
                label: viewDescriptorService.getViewContainerModel(viewDescriptorService.getViewContainerById(viewletId)).title
            };
        })));
        items.push({
            type: 'separator',
            label: ( localizeWithPath('vs/workbench/browser/actions/layoutActions', 'panel', "Panel"))
        });
        const pinnedPanels = paneCompositePartService.getPinnedPaneCompositeIds(1 );
        items.push(...( pinnedPanels
            .filter(panel => {
            if (panel === viewDescriptorService.getViewContainerByViewId(focusedViewId).id) {
                return false;
            }
            return !viewDescriptorService.getViewContainerById(panel).rejectAddedViews;
        })
            .map(panel => {
            return {
                id: panel,
                label: viewDescriptorService.getViewContainerModel(viewDescriptorService.getViewContainerById(panel)).title
            };
        })));
        items.push({
            type: 'separator',
            label: ( localizeWithPath(
                'vs/workbench/browser/actions/layoutActions',
                'secondarySideBar',
                "Secondary Side Bar"
            ))
        });
        const pinnedAuxPanels = paneCompositePartService.getPinnedPaneCompositeIds(2 );
        items.push(...( pinnedAuxPanels
            .filter(panel => {
            if (panel === viewDescriptorService.getViewContainerByViewId(focusedViewId).id) {
                return false;
            }
            return !viewDescriptorService.getViewContainerById(panel).rejectAddedViews;
        })
            .map(panel => {
            return {
                id: panel,
                label: viewDescriptorService.getViewContainerModel(viewDescriptorService.getViewContainerById(panel)).title
            };
        })));
        quickPick.items = items;
        quickPick.onDidAccept(() => {
            const destination = quickPick.selectedItems[0];
            if (destination.id === '_.panel.newcontainer') {
                viewDescriptorService.moveViewToLocation(viewDescriptor, 1 );
                viewsService.openView(focusedViewId, true);
            }
            else if (destination.id === '_.sidebar.newcontainer') {
                viewDescriptorService.moveViewToLocation(viewDescriptor, 0 );
                viewsService.openView(focusedViewId, true);
            }
            else if (destination.id === '_.auxiliarybar.newcontainer') {
                viewDescriptorService.moveViewToLocation(viewDescriptor, 2 );
                viewsService.openView(focusedViewId, true);
            }
            else if (destination.id) {
                viewDescriptorService.moveViewsToContainer([viewDescriptor], viewDescriptorService.getViewContainerById(destination.id));
                viewsService.openView(focusedViewId, true);
            }
            quickPick.hide();
        });
        quickPick.show();
    }
}
registerAction2(MoveFocusedViewAction);
registerAction2(class extends Action2 {
    constructor() {
        super({
            id: 'workbench.action.resetFocusedViewLocation',
            title: {
                value: ( localizeWithPath(
                    'vs/workbench/browser/actions/layoutActions',
                    'resetFocusedViewLocation',
                    "Reset Focused View Location"
                )),
                original: 'Reset Focused View Location'
            },
            category: Categories.View,
            f1: true,
            precondition: ( FocusedViewContext.notEqualsTo(''))
        });
    }
    run(accessor) {
        const viewDescriptorService = accessor.get(IViewDescriptorService);
        const contextKeyService = accessor.get(IContextKeyService);
        const dialogService = accessor.get(IDialogService);
        const viewsService = accessor.get(IViewsService);
        const focusedViewId = FocusedViewContext.getValue(contextKeyService);
        let viewDescriptor = null;
        if (focusedViewId !== undefined && focusedViewId.trim() !== '') {
            viewDescriptor = viewDescriptorService.getViewDescriptorById(focusedViewId);
        }
        if (!viewDescriptor) {
            dialogService.error(( localizeWithPath(
                'vs/workbench/browser/actions/layoutActions',
                'resetFocusedView.error.noFocusedView',
                "There is no view currently focused."
            )));
            return;
        }
        const defaultContainer = viewDescriptorService.getDefaultContainerById(viewDescriptor.id);
        if (!defaultContainer || defaultContainer === viewDescriptorService.getViewContainerByViewId(viewDescriptor.id)) {
            return;
        }
        viewDescriptorService.moveViewsToContainer([viewDescriptor], defaultContainer);
        viewsService.openView(viewDescriptor.id, true);
    }
});
class BaseResizeViewAction extends Action2 {
    static { this.RESIZE_INCREMENT = 60; }
    resizePart(widthChange, heightChange, layoutService, partToResize) {
        let part;
        if (partToResize === undefined) {
            const isEditorFocus = layoutService.hasFocus("workbench.parts.editor" );
            const isSidebarFocus = layoutService.hasFocus("workbench.parts.sidebar" );
            const isPanelFocus = layoutService.hasFocus("workbench.parts.panel" );
            const isAuxiliaryBarFocus = layoutService.hasFocus("workbench.parts.auxiliarybar" );
            if (isSidebarFocus) {
                part = "workbench.parts.sidebar" ;
            }
            else if (isPanelFocus) {
                part = "workbench.parts.panel" ;
            }
            else if (isEditorFocus) {
                part = "workbench.parts.editor" ;
            }
            else if (isAuxiliaryBarFocus) {
                part = "workbench.parts.auxiliarybar" ;
            }
        }
        else {
            part = partToResize;
        }
        if (part) {
            layoutService.resizePart(part, widthChange, heightChange);
        }
    }
}
class IncreaseViewSizeAction extends BaseResizeViewAction {
    constructor() {
        super({
            id: 'workbench.action.increaseViewSize',
            title: { value: ( localizeWithPath(
                'vs/workbench/browser/actions/layoutActions',
                'increaseViewSize',
                "Increase Current View Size"
            )), original: 'Increase Current View Size' },
            f1: true
        });
    }
    run(accessor) {
        this.resizePart(BaseResizeViewAction.RESIZE_INCREMENT, BaseResizeViewAction.RESIZE_INCREMENT, accessor.get(IWorkbenchLayoutService));
    }
}
class IncreaseViewWidthAction extends BaseResizeViewAction {
    constructor() {
        super({
            id: 'workbench.action.increaseViewWidth',
            title: { value: ( localizeWithPath(
                'vs/workbench/browser/actions/layoutActions',
                'increaseEditorWidth',
                "Increase Editor Width"
            )), original: 'Increase Editor Width' },
            f1: true
        });
    }
    run(accessor) {
        this.resizePart(BaseResizeViewAction.RESIZE_INCREMENT, 0, accessor.get(IWorkbenchLayoutService), "workbench.parts.editor" );
    }
}
class IncreaseViewHeightAction extends BaseResizeViewAction {
    constructor() {
        super({
            id: 'workbench.action.increaseViewHeight',
            title: { value: ( localizeWithPath(
                'vs/workbench/browser/actions/layoutActions',
                'increaseEditorHeight',
                "Increase Editor Height"
            )), original: 'Increase Editor Height' },
            f1: true
        });
    }
    run(accessor) {
        this.resizePart(0, BaseResizeViewAction.RESIZE_INCREMENT, accessor.get(IWorkbenchLayoutService), "workbench.parts.editor" );
    }
}
class DecreaseViewSizeAction extends BaseResizeViewAction {
    constructor() {
        super({
            id: 'workbench.action.decreaseViewSize',
            title: { value: ( localizeWithPath(
                'vs/workbench/browser/actions/layoutActions',
                'decreaseViewSize',
                "Decrease Current View Size"
            )), original: 'Decrease Current View Size' },
            f1: true
        });
    }
    run(accessor) {
        this.resizePart(-BaseResizeViewAction.RESIZE_INCREMENT, -BaseResizeViewAction.RESIZE_INCREMENT, accessor.get(IWorkbenchLayoutService));
    }
}
class DecreaseViewWidthAction extends BaseResizeViewAction {
    constructor() {
        super({
            id: 'workbench.action.decreaseViewWidth',
            title: { value: ( localizeWithPath(
                'vs/workbench/browser/actions/layoutActions',
                'decreaseEditorWidth',
                "Decrease Editor Width"
            )), original: 'Decrease Editor Width' },
            f1: true
        });
    }
    run(accessor) {
        this.resizePart(-BaseResizeViewAction.RESIZE_INCREMENT, 0, accessor.get(IWorkbenchLayoutService), "workbench.parts.editor" );
    }
}
class DecreaseViewHeightAction extends BaseResizeViewAction {
    constructor() {
        super({
            id: 'workbench.action.decreaseViewHeight',
            title: { value: ( localizeWithPath(
                'vs/workbench/browser/actions/layoutActions',
                'decreaseEditorHeight',
                "Decrease Editor Height"
            )), original: 'Decrease Editor Height' },
            f1: true
        });
    }
    run(accessor) {
        this.resizePart(0, -BaseResizeViewAction.RESIZE_INCREMENT, accessor.get(IWorkbenchLayoutService), "workbench.parts.editor" );
    }
}
registerAction2(IncreaseViewSizeAction);
registerAction2(IncreaseViewWidthAction);
registerAction2(IncreaseViewHeightAction);
registerAction2(DecreaseViewSizeAction);
registerAction2(DecreaseViewWidthAction);
registerAction2(DecreaseViewHeightAction);
function isContextualLayoutVisualIcon(icon) {
    return icon.iconA !== undefined;
}
const CreateToggleLayoutItem = (id, active, label, visualIcon) => {
    return {
        id,
        active,
        label,
        visualIcon,
        activeIcon: Codicon.eye,
        inactiveIcon: Codicon.eyeClosed,
        activeAriaLabel: ( localizeWithPath(
            'vs/workbench/browser/actions/layoutActions',
            'selectToHide',
            "Select to Hide"
        )),
        inactiveAriaLabel: ( localizeWithPath(
            'vs/workbench/browser/actions/layoutActions',
            'selectToShow',
            "Select to Show"
        )),
        useButtons: true,
    };
};
const CreateOptionLayoutItem = (id, active, label, visualIcon) => {
    return {
        id,
        active,
        label,
        visualIcon,
        activeIcon: Codicon.check,
        activeAriaLabel: ( localizeWithPath('vs/workbench/browser/actions/layoutActions', 'active', "Active")),
        useButtons: false
    };
};
const MenuBarToggledContext = ( ContextKeyExpr.and(( IsMacNativeContext.toNegated()), ( ContextKeyExpr.notEquals('config.window.menuBarVisibility', 'hidden')), ( ContextKeyExpr.notEquals('config.window.menuBarVisibility', 'toggle')), ( ContextKeyExpr.notEquals('config.window.menuBarVisibility', 'compact'))));
const ToggleVisibilityActions = [];
if (!isMacintosh || !isNative) {
    ToggleVisibilityActions.push(CreateToggleLayoutItem('workbench.action.toggleMenuBar', MenuBarToggledContext, ( localizeWithPath('vs/workbench/browser/actions/layoutActions', 'menuBar', "Menu Bar")), menubarIcon));
}
ToggleVisibilityActions.push(...[
    CreateToggleLayoutItem(ToggleActivityBarVisibilityAction.ID, ( ContextKeyExpr.equals('config.workbench.activityBar.visible', true)), ( localizeWithPath(
        'vs/workbench/browser/actions/layoutActions',
        'activityBar',
        "Activity Bar"
    )), { whenA: ( ContextKeyExpr.equals('config.workbench.sideBar.location', 'left')), iconA: activityBarLeftIcon, iconB: activityBarRightIcon }),
    CreateToggleLayoutItem(ToggleSidebarVisibilityAction.ID, SideBarVisibleContext, ( localizeWithPath(
        'vs/workbench/browser/actions/layoutActions',
        'sideBar',
        "Primary Side Bar"
    )), { whenA: ( ContextKeyExpr.equals('config.workbench.sideBar.location', 'left')), iconA: panelLeftIcon, iconB: panelRightIcon }),
    CreateToggleLayoutItem(ToggleAuxiliaryBarAction.ID, AuxiliaryBarVisibleContext, ( localizeWithPath(
        'vs/workbench/browser/actions/layoutActions',
        'secondarySideBar',
        "Secondary Side Bar"
    )), { whenA: ( ContextKeyExpr.equals('config.workbench.sideBar.location', 'left')), iconA: panelRightIcon, iconB: panelLeftIcon }),
    CreateToggleLayoutItem(TogglePanelAction.ID, PanelVisibleContext, ( localizeWithPath('vs/workbench/browser/actions/layoutActions', 'panel', "Panel")), panelIcon),
    CreateToggleLayoutItem(ToggleStatusbarVisibilityAction.ID, ( ContextKeyExpr.equals('config.workbench.statusBar.visible', true)), ( localizeWithPath('vs/workbench/browser/actions/layoutActions', 'statusBar', "Status Bar")), statusBarIcon),
]);
const MoveSideBarActions = [
    CreateOptionLayoutItem(MoveSidebarLeftAction.ID, ( ContextKeyExpr.equals('config.workbench.sideBar.location', 'left')), ( localizeWithPath('vs/workbench/browser/actions/layoutActions', 'leftSideBar', "Left")), panelLeftIcon),
    CreateOptionLayoutItem(MoveSidebarRightAction.ID, ( ContextKeyExpr.equals('config.workbench.sideBar.location', 'right')), ( localizeWithPath('vs/workbench/browser/actions/layoutActions', 'rightSideBar', "Right")), panelRightIcon),
];
const AlignPanelActions = [
    CreateOptionLayoutItem('workbench.action.alignPanelLeft', ( PanelAlignmentContext.isEqualTo('left')), ( localizeWithPath('vs/workbench/browser/actions/layoutActions', 'leftPanel', "Left")), panelAlignmentLeftIcon),
    CreateOptionLayoutItem('workbench.action.alignPanelRight', ( PanelAlignmentContext.isEqualTo('right')), ( localizeWithPath('vs/workbench/browser/actions/layoutActions', 'rightPanel', "Right")), panelAlignmentRightIcon),
    CreateOptionLayoutItem('workbench.action.alignPanelCenter', ( PanelAlignmentContext.isEqualTo('center')), ( localizeWithPath('vs/workbench/browser/actions/layoutActions', 'centerPanel', "Center")), panelAlignmentCenterIcon),
    CreateOptionLayoutItem('workbench.action.alignPanelJustify', ( PanelAlignmentContext.isEqualTo('justify')), ( localizeWithPath('vs/workbench/browser/actions/layoutActions', 'justifyPanel', "Justify")), panelAlignmentJustifyIcon),
];
const MiscLayoutOptions = [
    CreateOptionLayoutItem('workbench.action.toggleFullScreen', IsFullscreenContext, ( localizeWithPath('vs/workbench/browser/actions/layoutActions', 'fullscreen', "Full Screen")), fullscreenIcon),
    CreateOptionLayoutItem('workbench.action.toggleZenMode', InEditorZenModeContext, ( localizeWithPath('vs/workbench/browser/actions/layoutActions', 'zenMode', "Zen Mode")), zenModeIcon),
    CreateOptionLayoutItem('workbench.action.toggleCenteredLayout', IsCenteredLayoutContext, ( localizeWithPath(
        'vs/workbench/browser/actions/layoutActions',
        'centeredLayout',
        "Centered Layout"
    )), centerLayoutIcon),
];
const LayoutContextKeySet = ( new Set());
for (const { active } of [...ToggleVisibilityActions, ...MoveSideBarActions, ...AlignPanelActions, ...MiscLayoutOptions]) {
    for (const key of ( active.keys())) {
        LayoutContextKeySet.add(key);
    }
}
registerAction2(class CustomizeLayoutAction extends Action2 {
    constructor() {
        super({
            id: 'workbench.action.customizeLayout',
            title: { original: 'Customize Layout...', value: ( localizeWithPath(
                'vs/workbench/browser/actions/layoutActions',
                'customizeLayout',
                "Customize Layout..."
            )) },
            f1: true,
            icon: configureLayoutIcon,
            menu: [
                {
                    id: MenuId.LayoutControlMenuSubmenu,
                    group: 'z_end',
                },
                {
                    id: MenuId.LayoutControlMenu,
                    when: ( ContextKeyExpr.equals('config.workbench.layoutControl.type', 'both')),
                    group: 'z_end'
                }
            ]
        });
    }
    getItems(contextKeyService) {
        const toQuickPickItem = (item) => {
            const toggled = item.active.evaluate(contextKeyService.getContext(null));
            let label = item.useButtons ?
                item.label :
                item.label + (toggled && item.activeIcon ? ` $(${item.activeIcon.id})` : (!toggled && item.inactiveIcon ? ` $(${item.inactiveIcon.id})` : ''));
            const ariaLabel = item.label + (toggled && item.activeAriaLabel ? ` (${item.activeAriaLabel})` : (!toggled && item.inactiveAriaLabel ? ` (${item.inactiveAriaLabel})` : ''));
            if (item.visualIcon) {
                let icon = item.visualIcon;
                if (isContextualLayoutVisualIcon(icon)) {
                    const useIconA = icon.whenA.evaluate(contextKeyService.getContext(null));
                    icon = useIconA ? icon.iconA : icon.iconB;
                }
                label = `$(${icon.id}) ${label}`;
            }
            const icon = toggled ? item.activeIcon : item.inactiveIcon;
            return {
                type: 'item',
                id: item.id,
                label,
                ariaLabel,
                buttons: !item.useButtons ? undefined : [
                    {
                        alwaysVisible: false,
                        tooltip: ariaLabel,
                        iconClass: icon ? ThemeIcon.asClassName(icon) : undefined
                    }
                ]
            };
        };
        return [
            {
                type: 'separator',
                label: ( localizeWithPath(
                    'vs/workbench/browser/actions/layoutActions',
                    'toggleVisibility',
                    "Visibility"
                ))
            },
            ...( ToggleVisibilityActions.map(toQuickPickItem)),
            {
                type: 'separator',
                label: ( localizeWithPath(
                    'vs/workbench/browser/actions/layoutActions',
                    'sideBarPosition',
                    "Primary Side Bar Position"
                ))
            },
            ...( MoveSideBarActions.map(toQuickPickItem)),
            {
                type: 'separator',
                label: ( localizeWithPath(
                    'vs/workbench/browser/actions/layoutActions',
                    'panelAlignment',
                    "Panel Alignment"
                ))
            },
            ...( AlignPanelActions.map(toQuickPickItem)),
            {
                type: 'separator',
                label: ( localizeWithPath('vs/workbench/browser/actions/layoutActions', 'layoutModes', "Modes")),
            },
            ...( MiscLayoutOptions.map(toQuickPickItem)),
        ];
    }
    run(accessor) {
        if (this._currentQuickPick) {
            this._currentQuickPick.hide();
            return;
        }
        const configurationService = accessor.get(IConfigurationService);
        const contextKeyService = accessor.get(IContextKeyService);
        const commandService = accessor.get(ICommandService);
        const quickInputService = accessor.get(IQuickInputService);
        const quickPick = quickInputService.createQuickPick();
        this._currentQuickPick = quickPick;
        quickPick.items = this.getItems(contextKeyService);
        quickPick.ignoreFocusOut = true;
        quickPick.hideInput = true;
        quickPick.title = ( localizeWithPath(
            'vs/workbench/browser/actions/layoutActions',
            'customizeLayoutQuickPickTitle',
            "Customize Layout"
        ));
        const closeButton = {
            alwaysVisible: true,
            iconClass: ThemeIcon.asClassName(Codicon.close),
            tooltip: ( localizeWithPath('vs/workbench/browser/actions/layoutActions', 'close', "Close"))
        };
        const resetButton = {
            alwaysVisible: true,
            iconClass: ThemeIcon.asClassName(Codicon.discard),
            tooltip: ( localizeWithPath(
                'vs/workbench/browser/actions/layoutActions',
                'restore defaults',
                "Restore Defaults"
            ))
        };
        quickPick.buttons = [
            resetButton,
            closeButton
        ];
        const disposables = ( new DisposableStore());
        let selectedItem = undefined;
        disposables.add(contextKeyService.onDidChangeContext(changeEvent => {
            if (changeEvent.affectsSome(LayoutContextKeySet)) {
                quickPick.items = this.getItems(contextKeyService);
                if (selectedItem) {
                    quickPick.activeItems = quickPick.items.filter(item => item.id === selectedItem?.id);
                }
                setTimeout(() => quickInputService.focus(), 0);
            }
        }));
        quickPick.onDidAccept(event => {
            if (quickPick.selectedItems.length) {
                selectedItem = quickPick.selectedItems[0];
                commandService.executeCommand(selectedItem.id);
            }
        });
        quickPick.onDidTriggerItemButton(event => {
            if (event.item) {
                selectedItem = event.item;
                commandService.executeCommand(selectedItem.id);
            }
        });
        quickPick.onDidTriggerButton((button) => {
            if (button === closeButton) {
                quickPick.hide();
            }
            else if (button === resetButton) {
                const resetSetting = (id) => {
                    const config = configurationService.inspect(id);
                    configurationService.updateValue(id, config.defaultValue);
                };
                resetSetting('workbench.activityBar.visible');
                resetSetting('workbench.sideBar.location');
                resetSetting('workbench.statusBar.visible');
                resetSetting('workbench.panel.defaultLocation');
                if (!isMacintosh || !isNative) {
                    resetSetting('window.menuBarVisibility');
                }
                commandService.executeCommand('workbench.action.alignPanelCenter');
            }
        });
        quickPick.onDidHide(() => {
            quickPick.dispose();
        });
        quickPick.onDispose(() => {
            this._currentQuickPick = undefined;
            disposables.dispose();
        });
        quickPick.show();
    }
});
export { ToggleActivityBarVisibilityAction, ToggleSeparatePinnedTabsAction, ToggleSidebarPositionAction, ToggleStatusbarVisibilityAction, ToggleTabsVisibilityAction };
