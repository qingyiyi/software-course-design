import { __decorate, __param } from '../../../../../../../external/tslib/tslib.es6.js';
import { distinct, flatten } from 'monaco-editor/esm/vs/base/common/arrays.js';
import { Emitter } from 'monaco-editor/esm/vs/base/common/event.js';
import { parse } from 'monaco-editor/esm/vs/base/common/json.js';
import { Disposable } from 'monaco-editor/esm/vs/base/common/lifecycle.js';
import { getIconClasses } from 'monaco-editor/esm/vs/editor/common/services/getIconClasses.js';
import { IFileService, FileKind } from 'monaco-editor/esm/vs/platform/files/common/files.js';
import { createDecorator } from 'monaco-editor/esm/vs/platform/instantiation/common/instantiation.js';
import { isWorkspace, IWorkspaceContextService } from 'monaco-editor/esm/vs/platform/workspace/common/workspace.js';
import { IQuickInputService } from 'monaco-editor/esm/vs/platform/quickinput/common/quickInput.js';
import { IModelService } from 'monaco-editor/esm/vs/editor/common/services/model.js';
import { ILanguageService } from 'monaco-editor/esm/vs/editor/common/languages/language.js';
import { localizeWithPath } from 'monaco-editor/esm/vs/nls.js';
import { IJSONEditingService } from '../../configuration/common/jsonEditing.js';
import { ResourceMap } from 'monaco-editor/esm/vs/base/common/map.js';
const EXTENSIONS_CONFIG = '.vscode/extensions.json';
const IWorkspaceExtensionsConfigService = ( createDecorator('IWorkspaceExtensionsConfigService'));
let WorkspaceExtensionsConfigService = class WorkspaceExtensionsConfigService extends Disposable {
    constructor(workspaceContextService, fileService, quickInputService, modelService, languageService, jsonEditingService) {
        super();
        this.workspaceContextService = workspaceContextService;
        this.fileService = fileService;
        this.quickInputService = quickInputService;
        this.modelService = modelService;
        this.languageService = languageService;
        this.jsonEditingService = jsonEditingService;
        this._onDidChangeExtensionsConfigs = this._register(( new Emitter()));
        this.onDidChangeExtensionsConfigs = this._onDidChangeExtensionsConfigs.event;
        this._register(workspaceContextService.onDidChangeWorkspaceFolders(e => this._onDidChangeExtensionsConfigs.fire()));
        this._register(fileService.onDidFilesChange(e => {
            const workspace = workspaceContextService.getWorkspace();
            if ((workspace.configuration && e.affects(workspace.configuration))
                || ( workspace.folders.some(folder => e.affects(folder.toResource(EXTENSIONS_CONFIG))))) {
                this._onDidChangeExtensionsConfigs.fire();
            }
        }));
    }
    async getExtensionsConfigs() {
        const workspace = this.workspaceContextService.getWorkspace();
        const result = [];
        const workspaceExtensionsConfigContent = workspace.configuration ? await this.resolveWorkspaceExtensionConfig(workspace.configuration) : undefined;
        if (workspaceExtensionsConfigContent) {
            result.push(workspaceExtensionsConfigContent);
        }
        result.push(...(await Promise.all(( workspace.folders.map(
            workspaceFolder => this.resolveWorkspaceFolderExtensionConfig(workspaceFolder)
        )))));
        return result;
    }
    async getRecommendations() {
        const configs = await this.getExtensionsConfigs();
        return distinct(flatten(( configs.map(c => c.recommendations ? ( c.recommendations.map(c => c.toLowerCase())) : []))));
    }
    async getUnwantedRecommendations() {
        const configs = await this.getExtensionsConfigs();
        return distinct(flatten(( configs.map(c => c.unwantedRecommendations ? ( c.unwantedRecommendations.map(c => c.toLowerCase())) : []))));
    }
    async toggleRecommendation(extensionId) {
        extensionId = extensionId.toLowerCase();
        const workspace = this.workspaceContextService.getWorkspace();
        const workspaceExtensionsConfigContent = workspace.configuration ? await this.resolveWorkspaceExtensionConfig(workspace.configuration) : undefined;
        const workspaceFolderExtensionsConfigContents = ( new ResourceMap());
        await Promise.all(( workspace.folders.map(async (workspaceFolder) => {
            const extensionsConfigContent = await this.resolveWorkspaceFolderExtensionConfig(workspaceFolder);
            workspaceFolderExtensionsConfigContents.set(workspaceFolder.uri, extensionsConfigContent);
        })));
        const isWorkspaceRecommended = workspaceExtensionsConfigContent && workspaceExtensionsConfigContent.recommendations?.some(r => r.toLowerCase() === extensionId);
        const recommendedWorksapceFolders = workspace.folders.filter(workspaceFolder => workspaceFolderExtensionsConfigContents.get(workspaceFolder.uri)?.recommendations?.some(r => r.toLowerCase() === extensionId));
        const isRecommended = isWorkspaceRecommended || recommendedWorksapceFolders.length > 0;
        const workspaceOrFolders = isRecommended
            ? await this.pickWorkspaceOrFolders(recommendedWorksapceFolders, isWorkspaceRecommended ? workspace : undefined, ( localizeWithPath(
            'vs/workbench/services/extensionRecommendations/common/workspaceExtensionsConfig',
            'select for remove',
            "Remove extension recommendation from"
        )))
            : await this.pickWorkspaceOrFolders(workspace.folders, workspace.configuration ? workspace : undefined, ( localizeWithPath(
            'vs/workbench/services/extensionRecommendations/common/workspaceExtensionsConfig',
            'select for add',
            "Add extension recommendation to"
        )));
        for (const workspaceOrWorkspaceFolder of workspaceOrFolders) {
            if (isWorkspace(workspaceOrWorkspaceFolder)) {
                await this.addOrRemoveWorkspaceRecommendation(extensionId, workspaceOrWorkspaceFolder, workspaceExtensionsConfigContent, !isRecommended);
            }
            else {
                await this.addOrRemoveWorkspaceFolderRecommendation(extensionId, workspaceOrWorkspaceFolder, workspaceFolderExtensionsConfigContents.get(workspaceOrWorkspaceFolder.uri), !isRecommended);
            }
        }
    }
    async toggleUnwantedRecommendation(extensionId) {
        const workspace = this.workspaceContextService.getWorkspace();
        const workspaceExtensionsConfigContent = workspace.configuration ? await this.resolveWorkspaceExtensionConfig(workspace.configuration) : undefined;
        const workspaceFolderExtensionsConfigContents = ( new ResourceMap());
        await Promise.all(( workspace.folders.map(async (workspaceFolder) => {
            const extensionsConfigContent = await this.resolveWorkspaceFolderExtensionConfig(workspaceFolder);
            workspaceFolderExtensionsConfigContents.set(workspaceFolder.uri, extensionsConfigContent);
        })));
        const isWorkspaceUnwanted = workspaceExtensionsConfigContent && workspaceExtensionsConfigContent.unwantedRecommendations?.some(r => r === extensionId);
        const unWantedWorksapceFolders = workspace.folders.filter(workspaceFolder => workspaceFolderExtensionsConfigContents.get(workspaceFolder.uri)?.unwantedRecommendations?.some(r => r === extensionId));
        const isUnwanted = isWorkspaceUnwanted || unWantedWorksapceFolders.length > 0;
        const workspaceOrFolders = isUnwanted
            ? await this.pickWorkspaceOrFolders(unWantedWorksapceFolders, isWorkspaceUnwanted ? workspace : undefined, ( localizeWithPath(
            'vs/workbench/services/extensionRecommendations/common/workspaceExtensionsConfig',
            'select for remove',
            "Remove extension recommendation from"
        )))
            : await this.pickWorkspaceOrFolders(workspace.folders, workspace.configuration ? workspace : undefined, ( localizeWithPath(
            'vs/workbench/services/extensionRecommendations/common/workspaceExtensionsConfig',
            'select for add',
            "Add extension recommendation to"
        )));
        for (const workspaceOrWorkspaceFolder of workspaceOrFolders) {
            if (isWorkspace(workspaceOrWorkspaceFolder)) {
                await this.addOrRemoveWorkspaceUnwantedRecommendation(extensionId, workspaceOrWorkspaceFolder, workspaceExtensionsConfigContent, !isUnwanted);
            }
            else {
                await this.addOrRemoveWorkspaceFolderUnwantedRecommendation(extensionId, workspaceOrWorkspaceFolder, workspaceFolderExtensionsConfigContents.get(workspaceOrWorkspaceFolder.uri), !isUnwanted);
            }
        }
    }
    async addOrRemoveWorkspaceFolderRecommendation(extensionId, workspaceFolder, extensionsConfigContent, add) {
        const values = [];
        if (add) {
            values.push({ path: ['recommendations'], value: [...(extensionsConfigContent.recommendations || []), extensionId] });
            if (extensionsConfigContent.unwantedRecommendations && ( extensionsConfigContent.unwantedRecommendations.some(e => e === extensionId))) {
                values.push({ path: ['unwantedRecommendations'], value: extensionsConfigContent.unwantedRecommendations.filter(e => e !== extensionId) });
            }
        }
        else if (extensionsConfigContent.recommendations) {
            values.push({ path: ['recommendations'], value: extensionsConfigContent.recommendations.filter(e => e !== extensionId) });
        }
        if (values.length) {
            return this.jsonEditingService.write(workspaceFolder.toResource(EXTENSIONS_CONFIG), values, true);
        }
    }
    async addOrRemoveWorkspaceRecommendation(extensionId, workspace, extensionsConfigContent, add) {
        const values = [];
        if (extensionsConfigContent) {
            if (add) {
                values.push({ path: ['extensions', 'recommendations'], value: [...(extensionsConfigContent.recommendations || []), extensionId] });
                if (extensionsConfigContent.unwantedRecommendations && ( extensionsConfigContent.unwantedRecommendations.some(e => e === extensionId))) {
                    values.push({ path: ['extensions', 'unwantedRecommendations'], value: extensionsConfigContent.unwantedRecommendations.filter(e => e !== extensionId) });
                }
            }
            else if (extensionsConfigContent.recommendations) {
                values.push({ path: ['extensions', 'recommendations'], value: extensionsConfigContent.recommendations.filter(e => e !== extensionId) });
            }
        }
        else if (add) {
            values.push({ path: ['extensions'], value: { recommendations: [extensionId] } });
        }
        if (values.length) {
            return this.jsonEditingService.write(workspace.configuration, values, true);
        }
    }
    async addOrRemoveWorkspaceFolderUnwantedRecommendation(extensionId, workspaceFolder, extensionsConfigContent, add) {
        const values = [];
        if (add) {
            values.push({ path: ['unwantedRecommendations'], value: [...(extensionsConfigContent.unwantedRecommendations || []), extensionId] });
            if (extensionsConfigContent.recommendations && ( extensionsConfigContent.recommendations.some(e => e === extensionId))) {
                values.push({ path: ['recommendations'], value: extensionsConfigContent.recommendations.filter(e => e !== extensionId) });
            }
        }
        else if (extensionsConfigContent.unwantedRecommendations) {
            values.push({ path: ['unwantedRecommendations'], value: extensionsConfigContent.unwantedRecommendations.filter(e => e !== extensionId) });
        }
        if (values.length) {
            return this.jsonEditingService.write(workspaceFolder.toResource(EXTENSIONS_CONFIG), values, true);
        }
    }
    async addOrRemoveWorkspaceUnwantedRecommendation(extensionId, workspace, extensionsConfigContent, add) {
        const values = [];
        if (extensionsConfigContent) {
            if (add) {
                values.push({ path: ['extensions', 'unwantedRecommendations'], value: [...(extensionsConfigContent.unwantedRecommendations || []), extensionId] });
                if (extensionsConfigContent.recommendations && ( extensionsConfigContent.recommendations.some(e => e === extensionId))) {
                    values.push({ path: ['extensions', 'recommendations'], value: extensionsConfigContent.recommendations.filter(e => e !== extensionId) });
                }
            }
            else if (extensionsConfigContent.unwantedRecommendations) {
                values.push({ path: ['extensions', 'unwantedRecommendations'], value: extensionsConfigContent.unwantedRecommendations.filter(e => e !== extensionId) });
            }
        }
        else if (add) {
            values.push({ path: ['extensions'], value: { unwantedRecommendations: [extensionId] } });
        }
        if (values.length) {
            return this.jsonEditingService.write(workspace.configuration, values, true);
        }
    }
    async pickWorkspaceOrFolders(workspaceFolders, workspace, placeHolder) {
        const workspaceOrFolders = workspace ? [...workspaceFolders, workspace] : [...workspaceFolders];
        if (workspaceOrFolders.length === 1) {
            return workspaceOrFolders;
        }
        const folderPicks = ( workspaceFolders.map(workspaceFolder => {
            return {
                label: workspaceFolder.name,
                description: ( localizeWithPath(
                    'vs/workbench/services/extensionRecommendations/common/workspaceExtensionsConfig',
                    'workspace folder',
                    "Workspace Folder"
                )),
                workspaceOrFolder: workspaceFolder,
                iconClasses: getIconClasses(this.modelService, this.languageService, workspaceFolder.uri, FileKind.ROOT_FOLDER)
            };
        }));
        if (workspace) {
            folderPicks.push({ type: 'separator' });
            folderPicks.push({
                label: ( localizeWithPath(
                    'vs/workbench/services/extensionRecommendations/common/workspaceExtensionsConfig',
                    'workspace',
                    "Workspace"
                )),
                workspaceOrFolder: workspace,
            });
        }
        const result = (await this.quickInputService.pick(folderPicks, { placeHolder, canPickMany: true })) || [];
        return ( result.map(r => r.workspaceOrFolder));
    }
    async resolveWorkspaceExtensionConfig(workspaceConfigurationResource) {
        try {
            const content = await this.fileService.readFile(workspaceConfigurationResource);
            const extensionsConfigContent = parse(( content.value.toString()))['extensions'];
            return extensionsConfigContent ? this.parseExtensionConfig(extensionsConfigContent) : undefined;
        }
        catch (e) {  }
        return undefined;
    }
    async resolveWorkspaceFolderExtensionConfig(workspaceFolder) {
        try {
            const content = await this.fileService.readFile(workspaceFolder.toResource(EXTENSIONS_CONFIG));
            const extensionsConfigContent = parse(( content.value.toString()));
            return this.parseExtensionConfig(extensionsConfigContent);
        }
        catch (e) {  }
        return {};
    }
    parseExtensionConfig(extensionsConfigContent) {
        return {
            recommendations: distinct(( (extensionsConfigContent.recommendations || []).map(e => e.toLowerCase()))),
            unwantedRecommendations: distinct(( (extensionsConfigContent.unwantedRecommendations || []).map(e => e.toLowerCase())))
        };
    }
};
WorkspaceExtensionsConfigService = ( __decorate([
    ( __param(0, IWorkspaceContextService)),
    ( __param(1, IFileService)),
    ( __param(2, IQuickInputService)),
    ( __param(3, IModelService)),
    ( __param(4, ILanguageService)),
    ( __param(5, IJSONEditingService))
], WorkspaceExtensionsConfigService));
export { EXTENSIONS_CONFIG, IWorkspaceExtensionsConfigService, WorkspaceExtensionsConfigService };
