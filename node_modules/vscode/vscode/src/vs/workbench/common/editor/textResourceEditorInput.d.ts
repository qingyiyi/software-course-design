import { GroupIdentifier, IUntypedEditorInput, IRevertOptions } from '../editor.js';
import { URI } from '../../../base/common/uri.js';
import { AbstractResourceEditorInput } from './resourceEditorInput.js';
import { ITextFileService, ITextFileSaveOptions } from '../../services/textfile/common/textfiles.js';
import { IEditorService } from '../../services/editor/common/editorService.js';
import { IFileService } from '../../../platform/files/common/files.js';
import { ILabelService } from '../../../platform/label/common/label.js';
import { IFilesConfigurationService } from '../../services/filesConfiguration/common/filesConfigurationService.js';

/**
 * The base class for all editor inputs that open in text editors.
 */
declare abstract class AbstractTextResourceEditorInput extends AbstractResourceEditorInput {
    protected readonly editorService: IEditorService;
    protected readonly textFileService: ITextFileService;
    constructor(resource: URI, preferredResource: URI | undefined, editorService: IEditorService, textFileService: ITextFileService, labelService: ILabelService, fileService: IFileService, filesConfigurationService: IFilesConfigurationService);
    save(group: GroupIdentifier, options?: ITextFileSaveOptions): Promise<IUntypedEditorInput | undefined>;
    saveAs(group: GroupIdentifier, options?: ITextFileSaveOptions): Promise<IUntypedEditorInput | undefined>;
    private doSave;
    revert(group: GroupIdentifier, options?: IRevertOptions): Promise<void>;
}

export { AbstractTextResourceEditorInput };
