import { Codicon } from 'monaco-editor/esm/vs/base/common/codicons.js';
import { localizeWithPath } from 'monaco-editor/esm/vs/nls.js';
import { registerIcon } from 'monaco-editor/esm/vs/platform/theme/common/iconRegistry.js';
const extensionsViewIcon = registerIcon('extensions-view-icon', Codicon.extensions, ( localizeWithPath(
 'vs/workbench/contrib/extensions/browser/extensionsIcons',
 'extensionsViewIcon',
 'View icon of the extensions view.'
)));
const manageExtensionIcon = registerIcon('extensions-manage', Codicon.gear, ( localizeWithPath(
 'vs/workbench/contrib/extensions/browser/extensionsIcons',
 'manageExtensionIcon',
 'Icon for the \'Manage\' action in the extensions view.'
)));
const clearSearchResultsIcon = registerIcon('extensions-clear-search-results', Codicon.clearAll, ( localizeWithPath(
 'vs/workbench/contrib/extensions/browser/extensionsIcons',
 'clearSearchResultsIcon',
 'Icon for the \'Clear Search Result\' action in the extensions view.'
)));
const refreshIcon = registerIcon('extensions-refresh', Codicon.refresh, ( localizeWithPath(
 'vs/workbench/contrib/extensions/browser/extensionsIcons',
 'refreshIcon',
 'Icon for the \'Refresh\' action in the extensions view.'
)));
const filterIcon = registerIcon('extensions-filter', Codicon.filter, ( localizeWithPath(
 'vs/workbench/contrib/extensions/browser/extensionsIcons',
 'filterIcon',
 'Icon for the \'Filter\' action in the extensions view.'
)));
const installLocalInRemoteIcon = registerIcon('extensions-install-local-in-remote', Codicon.cloudDownload, ( localizeWithPath(
 'vs/workbench/contrib/extensions/browser/extensionsIcons',
 'installLocalInRemoteIcon',
 'Icon for the \'Install Local Extension in Remote\' action in the extensions view.'
)));
const installWorkspaceRecommendedIcon = registerIcon('extensions-install-workspace-recommended', Codicon.cloudDownload, ( localizeWithPath(
 'vs/workbench/contrib/extensions/browser/extensionsIcons',
 'installWorkspaceRecommendedIcon',
 'Icon for the \'Install Workspace Recommended Extensions\' action in the extensions view.'
)));
const configureRecommendedIcon = registerIcon('extensions-configure-recommended', Codicon.pencil, ( localizeWithPath(
 'vs/workbench/contrib/extensions/browser/extensionsIcons',
 'configureRecommendedIcon',
 'Icon for the \'Configure Recommended Extensions\' action in the extensions view.'
)));
const syncEnabledIcon = registerIcon('extensions-sync-enabled', Codicon.sync, ( localizeWithPath(
 'vs/workbench/contrib/extensions/browser/extensionsIcons',
 'syncEnabledIcon',
 'Icon to indicate that an extension is synced.'
)));
const syncIgnoredIcon = registerIcon('extensions-sync-ignored', Codicon.syncIgnored, ( localizeWithPath(
 'vs/workbench/contrib/extensions/browser/extensionsIcons',
 'syncIgnoredIcon',
 'Icon to indicate that an extension is ignored when syncing.'
)));
const remoteIcon = registerIcon('extensions-remote', Codicon.remote, ( localizeWithPath(
 'vs/workbench/contrib/extensions/browser/extensionsIcons',
 'remoteIcon',
 'Icon to indicate that an extension is remote in the extensions view and editor.'
)));
const installCountIcon = registerIcon('extensions-install-count', Codicon.cloudDownload, ( localizeWithPath(
 'vs/workbench/contrib/extensions/browser/extensionsIcons',
 'installCountIcon',
 'Icon shown along with the install count in the extensions view and editor.'
)));
const ratingIcon = registerIcon('extensions-rating', Codicon.star, ( localizeWithPath(
 'vs/workbench/contrib/extensions/browser/extensionsIcons',
 'ratingIcon',
 'Icon shown along with the rating in the extensions view and editor.'
)));
const verifiedPublisherIcon = registerIcon('extensions-verified-publisher', Codicon.verifiedFilled, ( localizeWithPath(
 'vs/workbench/contrib/extensions/browser/extensionsIcons',
 'verifiedPublisher',
 'Icon used for the verified extension publisher in the extensions view and editor.'
)));
const preReleaseIcon = registerIcon('extensions-pre-release', Codicon.versions, ( localizeWithPath(
 'vs/workbench/contrib/extensions/browser/extensionsIcons',
 'preReleaseIcon',
 'Icon shown for extensions having pre-release versions in extensions view and editor.'
)));
const sponsorIcon = registerIcon('extensions-sponsor', Codicon.heartFilled, ( localizeWithPath(
 'vs/workbench/contrib/extensions/browser/extensionsIcons',
 'sponsorIcon',
 'Icon used for sponsoring extensions in the extensions view and editor.'
)));
const starFullIcon = registerIcon('extensions-star-full', Codicon.starFull, ( localizeWithPath(
 'vs/workbench/contrib/extensions/browser/extensionsIcons',
 'starFullIcon',
 'Full star icon used for the rating in the extensions editor.'
)));
const starHalfIcon = registerIcon('extensions-star-half', Codicon.starHalf, ( localizeWithPath(
 'vs/workbench/contrib/extensions/browser/extensionsIcons',
 'starHalfIcon',
 'Half star icon used for the rating in the extensions editor.'
)));
const starEmptyIcon = registerIcon('extensions-star-empty', Codicon.starEmpty, ( localizeWithPath(
 'vs/workbench/contrib/extensions/browser/extensionsIcons',
 'starEmptyIcon',
 'Empty star icon used for the rating in the extensions editor.'
)));
const errorIcon = registerIcon('extensions-error-message', Codicon.error, ( localizeWithPath(
 'vs/workbench/contrib/extensions/browser/extensionsIcons',
 'errorIcon',
 'Icon shown with a error message in the extensions editor.'
)));
const warningIcon = registerIcon('extensions-warning-message', Codicon.warning, ( localizeWithPath(
 'vs/workbench/contrib/extensions/browser/extensionsIcons',
 'warningIcon',
 'Icon shown with a warning message in the extensions editor.'
)));
const infoIcon = registerIcon('extensions-info-message', Codicon.info, ( localizeWithPath(
 'vs/workbench/contrib/extensions/browser/extensionsIcons',
 'infoIcon',
 'Icon shown with an info message in the extensions editor.'
)));
const trustIcon = registerIcon('extension-workspace-trust', Codicon.shield, ( localizeWithPath(
 'vs/workbench/contrib/extensions/browser/extensionsIcons',
 'trustIcon',
 'Icon shown with a workspace trust message in the extension editor.'
)));
const activationTimeIcon = registerIcon('extension-activation-time', Codicon.history, ( localizeWithPath(
 'vs/workbench/contrib/extensions/browser/extensionsIcons',
 'activationtimeIcon',
 'Icon shown with a activation time message in the extension editor.'
)));
export { activationTimeIcon, clearSearchResultsIcon, configureRecommendedIcon, errorIcon, extensionsViewIcon, filterIcon, infoIcon, installCountIcon, installLocalInRemoteIcon, installWorkspaceRecommendedIcon, manageExtensionIcon, preReleaseIcon, ratingIcon, refreshIcon, remoteIcon, sponsorIcon, starEmptyIcon, starFullIcon, starHalfIcon, syncEnabledIcon, syncIgnoredIcon, trustIcon, verifiedPublisherIcon, warningIcon };
