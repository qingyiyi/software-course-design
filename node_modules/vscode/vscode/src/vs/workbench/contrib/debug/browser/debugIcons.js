import { Codicon } from 'monaco-editor/esm/vs/base/common/codicons.js';
import { localizeWithPath } from 'monaco-editor/esm/vs/nls.js';
import { registerIcon } from 'monaco-editor/esm/vs/platform/theme/common/iconRegistry.js';
const debugConsoleViewIcon = registerIcon('debug-console-view-icon', Codicon.debugConsole, ( localizeWithPath(
    'vs/workbench/contrib/debug/browser/debugIcons',
    'debugConsoleViewIcon',
    'View icon of the debug console view.'
)));
const runViewIcon = registerIcon('run-view-icon', Codicon.debugAlt, ( localizeWithPath(
    'vs/workbench/contrib/debug/browser/debugIcons',
    'runViewIcon',
    'View icon of the run view.'
)));
const variablesViewIcon = registerIcon('variables-view-icon', Codicon.debugAlt, ( localizeWithPath(
    'vs/workbench/contrib/debug/browser/debugIcons',
    'variablesViewIcon',
    'View icon of the variables view.'
)));
const watchViewIcon = registerIcon('watch-view-icon', Codicon.debugAlt, ( localizeWithPath(
    'vs/workbench/contrib/debug/browser/debugIcons',
    'watchViewIcon',
    'View icon of the watch view.'
)));
const callStackViewIcon = registerIcon('callstack-view-icon', Codicon.debugAlt, ( localizeWithPath(
    'vs/workbench/contrib/debug/browser/debugIcons',
    'callStackViewIcon',
    'View icon of the call stack view.'
)));
const breakpointsViewIcon = registerIcon('breakpoints-view-icon', Codicon.debugAlt, ( localizeWithPath(
    'vs/workbench/contrib/debug/browser/debugIcons',
    'breakpointsViewIcon',
    'View icon of the breakpoints view.'
)));
const loadedScriptsViewIcon = registerIcon('loaded-scripts-view-icon', Codicon.debugAlt, ( localizeWithPath(
    'vs/workbench/contrib/debug/browser/debugIcons',
    'loadedScriptsViewIcon',
    'View icon of the loaded scripts view.'
)));
const breakpoint = {
    regular: registerIcon('debug-breakpoint', Codicon.debugBreakpoint, ( localizeWithPath(
        'vs/workbench/contrib/debug/browser/debugIcons',
        'debugBreakpoint',
        'Icon for breakpoints.'
    ))),
    disabled: registerIcon('debug-breakpoint-disabled', Codicon.debugBreakpointDisabled, ( localizeWithPath(
        'vs/workbench/contrib/debug/browser/debugIcons',
        'debugBreakpointDisabled',
        'Icon for disabled breakpoints.'
    ))),
    unverified: registerIcon('debug-breakpoint-unverified', Codicon.debugBreakpointUnverified, ( localizeWithPath(
        'vs/workbench/contrib/debug/browser/debugIcons',
        'debugBreakpointUnverified',
        'Icon for unverified breakpoints.'
    )))
};
const functionBreakpoint = {
    regular: registerIcon('debug-breakpoint-function', Codicon.debugBreakpointFunction, ( localizeWithPath(
        'vs/workbench/contrib/debug/browser/debugIcons',
        'debugBreakpointFunction',
        'Icon for function breakpoints.'
    ))),
    disabled: registerIcon('debug-breakpoint-function-disabled', Codicon.debugBreakpointFunctionDisabled, ( localizeWithPath(
        'vs/workbench/contrib/debug/browser/debugIcons',
        'debugBreakpointFunctionDisabled',
        'Icon for disabled function breakpoints.'
    ))),
    unverified: registerIcon('debug-breakpoint-function-unverified', Codicon.debugBreakpointFunctionUnverified, ( localizeWithPath(
        'vs/workbench/contrib/debug/browser/debugIcons',
        'debugBreakpointFunctionUnverified',
        'Icon for unverified function breakpoints.'
    )))
};
const conditionalBreakpoint = {
    regular: registerIcon('debug-breakpoint-conditional', Codicon.debugBreakpointConditional, ( localizeWithPath(
        'vs/workbench/contrib/debug/browser/debugIcons',
        'debugBreakpointConditional',
        'Icon for conditional breakpoints.'
    ))),
    disabled: registerIcon('debug-breakpoint-conditional-disabled', Codicon.debugBreakpointConditionalDisabled, ( localizeWithPath(
        'vs/workbench/contrib/debug/browser/debugIcons',
        'debugBreakpointConditionalDisabled',
        'Icon for disabled conditional breakpoints.'
    ))),
    unverified: registerIcon('debug-breakpoint-conditional-unverified', Codicon.debugBreakpointConditionalUnverified, ( localizeWithPath(
        'vs/workbench/contrib/debug/browser/debugIcons',
        'debugBreakpointConditionalUnverified',
        'Icon for unverified conditional breakpoints.'
    )))
};
const dataBreakpoint = {
    regular: registerIcon('debug-breakpoint-data', Codicon.debugBreakpointData, ( localizeWithPath(
        'vs/workbench/contrib/debug/browser/debugIcons',
        'debugBreakpointData',
        'Icon for data breakpoints.'
    ))),
    disabled: registerIcon('debug-breakpoint-data-disabled', Codicon.debugBreakpointDataDisabled, ( localizeWithPath(
        'vs/workbench/contrib/debug/browser/debugIcons',
        'debugBreakpointDataDisabled',
        'Icon for disabled data breakpoints.'
    ))),
    unverified: registerIcon('debug-breakpoint-data-unverified', Codicon.debugBreakpointDataUnverified, ( localizeWithPath(
        'vs/workbench/contrib/debug/browser/debugIcons',
        'debugBreakpointDataUnverified',
        'Icon for unverified data breakpoints.'
    ))),
};
const logBreakpoint = {
    regular: registerIcon('debug-breakpoint-log', Codicon.debugBreakpointLog, ( localizeWithPath(
        'vs/workbench/contrib/debug/browser/debugIcons',
        'debugBreakpointLog',
        'Icon for log breakpoints.'
    ))),
    disabled: registerIcon('debug-breakpoint-log-disabled', Codicon.debugBreakpointLogDisabled, ( localizeWithPath(
        'vs/workbench/contrib/debug/browser/debugIcons',
        'debugBreakpointLogDisabled',
        'Icon for disabled log breakpoint.'
    ))),
    unverified: registerIcon('debug-breakpoint-log-unverified', Codicon.debugBreakpointLogUnverified, ( localizeWithPath(
        'vs/workbench/contrib/debug/browser/debugIcons',
        'debugBreakpointLogUnverified',
        'Icon for unverified log breakpoints.'
    ))),
};
const debugBreakpointHint = registerIcon('debug-hint', Codicon.debugHint, ( localizeWithPath(
    'vs/workbench/contrib/debug/browser/debugIcons',
    'debugBreakpointHint',
    'Icon for breakpoint hints shown on hover in editor glyph margin.'
)));
const debugBreakpointUnsupported = registerIcon('debug-breakpoint-unsupported', Codicon.debugBreakpointUnsupported, ( localizeWithPath(
    'vs/workbench/contrib/debug/browser/debugIcons',
    'debugBreakpointUnsupported',
    'Icon for unsupported breakpoints.'
)));
const allBreakpoints = [breakpoint, functionBreakpoint, conditionalBreakpoint, dataBreakpoint, logBreakpoint];
const debugStackframe = registerIcon('debug-stackframe', Codicon.debugStackframe, ( localizeWithPath(
    'vs/workbench/contrib/debug/browser/debugIcons',
    'debugStackframe',
    'Icon for a stackframe shown in the editor glyph margin.'
)));
const debugStackframeFocused = registerIcon('debug-stackframe-focused', Codicon.debugStackframeFocused, ( localizeWithPath(
    'vs/workbench/contrib/debug/browser/debugIcons',
    'debugStackframeFocused',
    'Icon for a focused stackframe  shown in the editor glyph margin.'
)));
const debugGripper = registerIcon('debug-gripper', Codicon.gripper, ( localizeWithPath(
    'vs/workbench/contrib/debug/browser/debugIcons',
    'debugGripper',
    'Icon for the debug bar gripper.'
)));
const debugRestartFrame = registerIcon('debug-restart-frame', Codicon.debugRestartFrame, ( localizeWithPath(
    'vs/workbench/contrib/debug/browser/debugIcons',
    'debugRestartFrame',
    'Icon for the debug restart frame action.'
)));
const debugStop = registerIcon('debug-stop', Codicon.debugStop, ( localizeWithPath(
    'vs/workbench/contrib/debug/browser/debugIcons',
    'debugStop',
    'Icon for the debug stop action.'
)));
const debugDisconnect = registerIcon('debug-disconnect', Codicon.debugDisconnect, ( localizeWithPath(
    'vs/workbench/contrib/debug/browser/debugIcons',
    'debugDisconnect',
    'Icon for the debug disconnect action.'
)));
const debugRestart = registerIcon('debug-restart', Codicon.debugRestart, ( localizeWithPath(
    'vs/workbench/contrib/debug/browser/debugIcons',
    'debugRestart',
    'Icon for the debug restart action.'
)));
const debugStepOver = registerIcon('debug-step-over', Codicon.debugStepOver, ( localizeWithPath(
    'vs/workbench/contrib/debug/browser/debugIcons',
    'debugStepOver',
    'Icon for the debug step over action.'
)));
const debugStepInto = registerIcon('debug-step-into', Codicon.debugStepInto, ( localizeWithPath(
    'vs/workbench/contrib/debug/browser/debugIcons',
    'debugStepInto',
    'Icon for the debug step into action.'
)));
const debugStepOut = registerIcon('debug-step-out', Codicon.debugStepOut, ( localizeWithPath(
    'vs/workbench/contrib/debug/browser/debugIcons',
    'debugStepOut',
    'Icon for the debug step out action.'
)));
const debugStepBack = registerIcon('debug-step-back', Codicon.debugStepBack, ( localizeWithPath(
    'vs/workbench/contrib/debug/browser/debugIcons',
    'debugStepBack',
    'Icon for the debug step back action.'
)));
const debugPause = registerIcon('debug-pause', Codicon.debugPause, ( localizeWithPath(
    'vs/workbench/contrib/debug/browser/debugIcons',
    'debugPause',
    'Icon for the debug pause action.'
)));
const debugContinue = registerIcon('debug-continue', Codicon.debugContinue, ( localizeWithPath(
    'vs/workbench/contrib/debug/browser/debugIcons',
    'debugContinue',
    'Icon for the debug continue action.'
)));
const debugReverseContinue = registerIcon('debug-reverse-continue', Codicon.debugReverseContinue, ( localizeWithPath(
    'vs/workbench/contrib/debug/browser/debugIcons',
    'debugReverseContinue',
    'Icon for the debug reverse continue action.'
)));
const debugRun = registerIcon('debug-run', Codicon.run, ( localizeWithPath(
    'vs/workbench/contrib/debug/browser/debugIcons',
    'debugRun',
    'Icon for the run or debug action.'
)));
const debugStart = registerIcon('debug-start', Codicon.debugStart, ( localizeWithPath(
    'vs/workbench/contrib/debug/browser/debugIcons',
    'debugStart',
    'Icon for the debug start action.'
)));
const debugConfigure = registerIcon('debug-configure', Codicon.gear, ( localizeWithPath(
    'vs/workbench/contrib/debug/browser/debugIcons',
    'debugConfigure',
    'Icon for the debug configure action.'
)));
registerIcon('debug-console', Codicon.gear, ( localizeWithPath(
    'vs/workbench/contrib/debug/browser/debugIcons',
    'debugConsole',
    'Icon for the debug console open action.'
)));
const debugRemoveConfig = registerIcon('debug-remove-config', Codicon.trash, ( localizeWithPath(
    'vs/workbench/contrib/debug/browser/debugIcons',
    'debugRemoveConfig',
    'Icon for removing debug configurations.'
)));
registerIcon('debug-collapse-all', Codicon.collapseAll, ( localizeWithPath(
    'vs/workbench/contrib/debug/browser/debugIcons',
    'debugCollapseAll',
    'Icon for the collapse all action in the debug views.'
)));
const callstackViewSession = registerIcon('callstack-view-session', Codicon.bug, ( localizeWithPath(
    'vs/workbench/contrib/debug/browser/debugIcons',
    'callstackViewSession',
    'Icon for the session icon in the call stack view.'
)));
const debugConsoleClearAll = registerIcon('debug-console-clear-all', Codicon.clearAll, ( localizeWithPath(
    'vs/workbench/contrib/debug/browser/debugIcons',
    'debugConsoleClearAll',
    'Icon for the clear all action in the debug console.'
)));
const watchExpressionsRemoveAll = registerIcon('watch-expressions-remove-all', Codicon.closeAll, ( localizeWithPath(
    'vs/workbench/contrib/debug/browser/debugIcons',
    'watchExpressionsRemoveAll',
    'Icon for the Remove All action in the watch view.'
)));
const watchExpressionRemove = registerIcon('watch-expression-remove', Codicon.removeClose, ( localizeWithPath(
    'vs/workbench/contrib/debug/browser/debugIcons',
    'watchExpressionRemove',
    'Icon for the Remove action in the watch view.'
)));
const watchExpressionsAdd = registerIcon('watch-expressions-add', Codicon.add, ( localizeWithPath(
    'vs/workbench/contrib/debug/browser/debugIcons',
    'watchExpressionsAdd',
    'Icon for the add action in the watch view.'
)));
const watchExpressionsAddFuncBreakpoint = registerIcon('watch-expressions-add-function-breakpoint', Codicon.add, ( localizeWithPath(
    'vs/workbench/contrib/debug/browser/debugIcons',
    'watchExpressionsAddFuncBreakpoint',
    'Icon for the add function breakpoint action in the watch view.'
)));
const breakpointsRemoveAll = registerIcon('breakpoints-remove-all', Codicon.closeAll, ( localizeWithPath(
    'vs/workbench/contrib/debug/browser/debugIcons',
    'breakpointsRemoveAll',
    'Icon for the Remove All action in the breakpoints view.'
)));
const breakpointsActivate = registerIcon('breakpoints-activate', Codicon.activateBreakpoints, ( localizeWithPath(
    'vs/workbench/contrib/debug/browser/debugIcons',
    'breakpointsActivate',
    'Icon for the activate action in the breakpoints view.'
)));
const debugConsoleEvaluationInput = registerIcon('debug-console-evaluation-input', Codicon.arrowSmallRight, ( localizeWithPath(
    'vs/workbench/contrib/debug/browser/debugIcons',
    'debugConsoleEvaluationInput',
    'Icon for the debug evaluation input marker.'
)));
const debugConsoleEvaluationPrompt = registerIcon('debug-console-evaluation-prompt', Codicon.chevronRight, ( localizeWithPath(
    'vs/workbench/contrib/debug/browser/debugIcons',
    'debugConsoleEvaluationPrompt',
    'Icon for the debug evaluation prompt.'
)));
const debugInspectMemory = registerIcon('debug-inspect-memory', Codicon.fileBinary, ( localizeWithPath(
    'vs/workbench/contrib/debug/browser/debugIcons',
    'debugInspectMemory',
    'Icon for the inspect memory action.'
)));
export { allBreakpoints, breakpoint, breakpointsActivate, breakpointsRemoveAll, breakpointsViewIcon, callStackViewIcon, callstackViewSession, conditionalBreakpoint, dataBreakpoint, debugBreakpointHint, debugBreakpointUnsupported, debugConfigure, debugConsoleClearAll, debugConsoleEvaluationInput, debugConsoleEvaluationPrompt, debugConsoleViewIcon, debugContinue, debugDisconnect, debugGripper, debugInspectMemory, debugPause, debugRemoveConfig, debugRestart, debugRestartFrame, debugReverseContinue, debugRun, debugStackframe, debugStackframeFocused, debugStart, debugStepBack, debugStepInto, debugStepOut, debugStepOver, debugStop, functionBreakpoint, loadedScriptsViewIcon, logBreakpoint, runViewIcon, variablesViewIcon, watchExpressionRemove, watchExpressionsAdd, watchExpressionsAddFuncBreakpoint, watchExpressionsRemoveAll, watchViewIcon };
