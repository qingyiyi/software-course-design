import { __decorate, __param } from '../../../../../../../external/tslib/tslib.es6.js';
import { onUnexpectedError } from 'monaco-editor/esm/vs/base/common/errors.js';
import { Disposable } from 'monaco-editor/esm/vs/base/common/lifecycle.js';
import { ICodeEditorService } from 'monaco-editor/esm/vs/editor/browser/services/codeEditorService.js';
import { getEditorFeatures } from 'monaco-editor/esm/vs/editor/common/editorFeatures.js';
import { IInstantiationService } from 'monaco-editor/esm/vs/platform/instantiation/common/instantiation.js';
import { Registry } from 'monaco-editor/esm/vs/platform/registry/common/platform.js';
import { Extensions } from '../../../common/contributions.js';
let EditorFeaturesInstantiator = class EditorFeaturesInstantiator extends Disposable {
    constructor(codeEditorService, _instantiationService) {
        super();
        this._instantiationService = _instantiationService;
        this._instantiated = false;
        this._register(codeEditorService.onWillCreateCodeEditor(() => this._instantiate()));
        this._register(codeEditorService.onWillCreateDiffEditor(() => this._instantiate()));
        if (codeEditorService.listCodeEditors().length > 0 || codeEditorService.listDiffEditors().length > 0) {
            this._instantiate();
        }
    }
    _instantiate() {
        if (this._instantiated) {
            return;
        }
        this._instantiated = true;
        const editorFeatures = getEditorFeatures();
        for (const feature of editorFeatures) {
            try {
                const instance = this._instantiationService.createInstance(feature);
                if (typeof instance.dispose === 'function') {
                    this._register(instance);
                }
            }
            catch (err) {
                onUnexpectedError(err);
            }
        }
    }
};
EditorFeaturesInstantiator = ( __decorate([
    ( __param(0, ICodeEditorService)),
    ( __param(1, IInstantiationService))
], EditorFeaturesInstantiator));
const workbenchRegistry = ( Registry.as(Extensions.Workbench));
workbenchRegistry.registerWorkbenchContribution(EditorFeaturesInstantiator, 2 );
