import { __decorate, __param } from '../../../../../../../external/tslib/tslib.es6.js';
import { Disposable } from 'monaco-editor/esm/vs/base/common/lifecycle.js';
import { observableFromEvent, autorunWithStore } from 'monaco-editor/esm/vs/base/common/observable.js';
import { registerDiffEditorContribution } from 'monaco-editor/esm/vs/editor/browser/editorExtensions.js';
import { ICodeEditorService } from 'monaco-editor/esm/vs/editor/browser/services/codeEditorService.js';
import { AccessibleDiffViewerNext, AccessibleDiffViewerPrev } from 'monaco-editor/esm/vs/editor/browser/widget/diffEditor/diffEditor.contribution.js';
import { DiffEditorWidget } from 'monaco-editor/esm/vs/editor/browser/widget/diffEditor/diffEditorWidget.js';
import { EmbeddedDiffEditorWidget } from 'monaco-editor/esm/vs/editor/browser/widget/embeddedCodeEditorWidget.js';
import { localizeWithPath } from 'monaco-editor/esm/vs/nls.js';
import { IConfigurationService } from 'monaco-editor/esm/vs/platform/configuration/common/configuration.js';
import { IContextKeyService, ContextKeyEqualsExpr } from 'monaco-editor/esm/vs/platform/contextkey/common/contextkey.js';
import { IInstantiationService } from 'monaco-editor/esm/vs/platform/instantiation/common/instantiation.js';
import { IKeybindingService } from 'monaco-editor/esm/vs/platform/keybinding/common/keybinding.js';
import { Severity, INotificationService } from 'monaco-editor/esm/vs/platform/notification/common/notification.js';
import { Registry } from 'monaco-editor/esm/vs/platform/registry/common/platform.js';
import { FloatingEditorClickWidget } from '../../../browser/codeeditor.js';
import { Extensions } from '../../../common/configuration.js';
import { getCommentCommandInfo } from '../../accessibility/browser/accessibilityContributions.js';
import { IAccessibleViewService } from '../../accessibility/browser/accessibleView.js';
import { AccessibilityHelpAction } from '../../accessibility/browser/accessibleViewActions.js';
import { IEditorService } from '../../../services/editor/common/editorService.js';
let DiffEditorHelperContribution = class DiffEditorHelperContribution extends Disposable {
    static { this.ID = 'editor.contrib.diffEditorHelper'; }
    constructor(_diffEditor, _instantiationService, _configurationService, _notificationService) {
        super();
        this._diffEditor = _diffEditor;
        this._instantiationService = _instantiationService;
        this._configurationService = _configurationService;
        this._notificationService = _notificationService;
        this._register(createScreenReaderHelp());
        const isEmbeddedDiffEditor = this._diffEditor instanceof EmbeddedDiffEditorWidget;
        if (!isEmbeddedDiffEditor) {
            const computationResult = observableFromEvent(e => this._diffEditor.onDidUpdateDiff(e), () => this._diffEditor.getDiffComputationResult());
            const onlyWhiteSpaceChange = ( computationResult.map(r => r && !r.identical && r.changes2.length === 0));
            this._register(autorunWithStore((reader, store) => {
                if (onlyWhiteSpaceChange.read(reader)) {
                    const helperWidget = store.add(this._instantiationService.createInstance(FloatingEditorClickWidget, this._diffEditor.getModifiedEditor(), ( localizeWithPath(
                        'vs/workbench/contrib/codeEditor/browser/diffEditorHelper',
                        'hintWhitespace',
                        "Show Whitespace Differences"
                    )), null));
                    store.add(helperWidget.onClick(() => {
                        this._configurationService.updateValue('diffEditor.ignoreTrimWhitespace', false);
                    }));
                    helperWidget.render();
                }
            }));
            this._register(this._diffEditor.onDidUpdateDiff(() => {
                const diffComputationResult = this._diffEditor.getDiffComputationResult();
                if (diffComputationResult && diffComputationResult.quitEarly) {
                    this._notificationService.prompt(Severity.Warning, ( localizeWithPath(
                        'vs/workbench/contrib/codeEditor/browser/diffEditorHelper',
                        'hintTimeout',
                        "The diff algorithm was stopped early (after {0} ms.)",
                        this._diffEditor.maxComputationTime
                    )), [{
                            label: ( localizeWithPath(
                                'vs/workbench/contrib/codeEditor/browser/diffEditorHelper',
                                'removeTimeout',
                                "Remove Limit"
                            )),
                            run: () => {
                                this._configurationService.updateValue('diffEditor.maxComputationTime', 0);
                            }
                        }], {});
                }
            }));
        }
    }
};
DiffEditorHelperContribution = ( __decorate([
    ( __param(1, IInstantiationService)),
    ( __param(2, IConfigurationService)),
    ( __param(3, INotificationService))
], DiffEditorHelperContribution));
function createScreenReaderHelp() {
    return AccessibilityHelpAction.addImplementation(105, 'diff-editor', async (accessor) => {
        const accessibleViewService = accessor.get(IAccessibleViewService);
        const editorService = accessor.get(IEditorService);
        const codeEditorService = accessor.get(ICodeEditorService);
        const keybindingService = accessor.get(IKeybindingService);
        const contextKeyService = accessor.get(IContextKeyService);
        const next = keybindingService.lookupKeybinding(AccessibleDiffViewerNext.id)?.getAriaLabel();
        const previous = keybindingService.lookupKeybinding(AccessibleDiffViewerPrev.id)?.getAriaLabel();
        if (!(editorService.activeTextEditorControl instanceof DiffEditorWidget)) {
            return;
        }
        const codeEditor = codeEditorService.getActiveCodeEditor() || codeEditorService.getFocusedCodeEditor();
        if (!codeEditor) {
            return;
        }
        const keys = ['audioCues.diffLineDeleted', 'audioCues.diffLineInserted', 'audioCues.diffLineModified'];
        const content = [
            ( localizeWithPath(
                'vs/workbench/contrib/codeEditor/browser/diffEditorHelper',
                'msg1',
                "You are in a diff editor."
            )),
            ( localizeWithPath(
                'vs/workbench/contrib/codeEditor/browser/diffEditorHelper',
                'msg2',
                "View the next ({0}) or previous ({1}) diff in diff review mode, which is optimized for screen readers.",
                next,
                previous
            )),
            ( localizeWithPath(
                'vs/workbench/contrib/codeEditor/browser/diffEditorHelper',
                'msg3',
                "To control which audio cues should be played, the following settings can be configured: {0}.",
                keys.join(', ')
            )),
        ];
        const commentCommandInfo = getCommentCommandInfo(keybindingService, contextKeyService, codeEditor);
        if (commentCommandInfo) {
            content.push(commentCommandInfo);
        }
        accessibleViewService.show({
            verbositySettingKey: "accessibility.verbosity.diffEditor" ,
            provideContent: () => content.join('\n\n'),
            onClose: () => {
                codeEditor.focus();
            },
            options: { type: "help"  }
        });
    }, ContextKeyEqualsExpr.create('isInDiffEditor', true));
}
registerDiffEditorContribution(DiffEditorHelperContribution.ID, DiffEditorHelperContribution);
( Registry.as(Extensions.ConfigurationMigration))
    .registerConfigurationMigrations([{
        key: 'diffEditor.experimental.collapseUnchangedRegions',
        migrateFn: (value, accessor) => {
            return [
                ['diffEditor.hideUnchangedRegions.enabled', { value }],
                ['diffEditor.experimental.collapseUnchangedRegions', { value: undefined }]
            ];
        }
    }]);
