import { __decorate, __param } from '../../../../../../../external/tslib/tslib.es6.js';
import * as nls from 'monaco-editor/esm/vs/nls.js';
import { Registry } from 'monaco-editor/esm/vs/platform/registry/common/platform.js';
import { Extensions } from 'monaco-editor/esm/vs/platform/configuration/common/configurationRegistry.js';
import { ctxCommentEditorFocused } from './simpleCommentEditor.js';
import * as strings from 'monaco-editor/esm/vs/base/common/strings.js';
import { IAccessibleViewService } from '../../accessibility/browser/accessibleView.js';
import { AccessibilityHelpAction } from '../../accessibility/browser/accessibleViewActions.js';
import { IInstantiationService } from 'monaco-editor/esm/vs/platform/instantiation/common/instantiation.js';
import { IKeybindingService } from 'monaco-editor/esm/vs/platform/keybinding/common/keybinding.js';
import { Disposable } from 'monaco-editor/esm/vs/base/common/lifecycle.js';
import { ContextKeyExpr } from 'monaco-editor/esm/vs/platform/contextkey/common/contextkey.js';
import { CommentContextKeys } from '../common/commentContextKeys.js';
import { ToggleTabFocusModeAction } from 'monaco-editor/esm/vs/editor/contrib/toggleTabFocusMode/browser/toggleTabFocusMode.js';
( Registry.as(Extensions.Configuration)).registerConfiguration({
    id: 'comments',
    order: 20,
    title: ( nls.localizeWithPath(
        'vs/workbench/contrib/comments/browser/comments.contribution',
        'commentsConfigurationTitle',
        "Comments"
    )),
    type: 'object',
    properties: {
        'comments.openPanel': {
            enum: ['neverOpen', 'openOnSessionStart', 'openOnSessionStartWithComments'],
            default: 'openOnSessionStartWithComments',
            description: ( nls.localizeWithPath(
                'vs/workbench/contrib/comments/browser/comments.contribution',
                'openComments',
                "Controls when the comments panel should open."
            )),
            restricted: false,
            markdownDeprecationMessage: ( nls.localizeWithPath(
                'vs/workbench/contrib/comments/browser/comments.contribution',
                'comments.openPanel.deprecated',
                "This setting is deprecated in favor of `comments.openView`."
            ))
        },
        'comments.openView': {
            enum: ['never', 'file', 'firstFile', 'firstFileUnresolved'],
            enumDescriptions: [( nls.localizeWithPath(
                'vs/workbench/contrib/comments/browser/comments.contribution',
                'comments.openView.never',
                "The comments view will never be opened."
            )), ( nls.localizeWithPath(
                'vs/workbench/contrib/comments/browser/comments.contribution',
                'comments.openView.file',
                "The comments view will open when a file with comments is active."
            )), ( nls.localizeWithPath(
                'vs/workbench/contrib/comments/browser/comments.contribution',
                'comments.openView.firstFile',
                "If the comments view has not been opened yet during this session it will open the first time during a session that a file with comments is active."
            )), ( nls.localizeWithPath(
                'vs/workbench/contrib/comments/browser/comments.contribution',
                'comments.openView.firstFileUnresolved',
                "If the comments view has not been opened yet during this session and the comment is not resolved, it will open the first time during a session that a file with comments is active."
            ))],
            default: 'firstFile',
            description: ( nls.localizeWithPath(
                'vs/workbench/contrib/comments/browser/comments.contribution',
                'comments.openView',
                "Controls when the comments view should open."
            )),
            restricted: false
        },
        'comments.useRelativeTime': {
            type: 'boolean',
            default: true,
            description: ( nls.localizeWithPath(
                'vs/workbench/contrib/comments/browser/comments.contribution',
                'useRelativeTime',
                "Determines if relative time will be used in comment timestamps (ex. '1 day ago')."
            ))
        },
        'comments.visible': {
            type: 'boolean',
            default: true,
            description: ( nls.localizeWithPath(
                'vs/workbench/contrib/comments/browser/comments.contribution',
                'comments.visible',
                "Controls the visibility of the comments bar and comment threads in editors that have commenting ranges and comments. Comments are still accessible via the Comments view and will cause commenting to be toggled on in the same way running the command \"Comments: Toggle Editor Commenting\" toggles comments."
            ))
        },
        'comments.maxHeight': {
            type: 'boolean',
            default: true,
            description: ( nls.localizeWithPath(
                'vs/workbench/contrib/comments/browser/comments.contribution',
                'comments.maxHeight',
                "Controls whether the comments widget scrolls or expands."
            ))
        },
        'comments.collapseOnResolve': {
            type: 'boolean',
            default: true,
            description: ( nls.localizeWithPath(
                'vs/workbench/contrib/comments/browser/comments.contribution',
                'collapseOnResolve',
                "Controls whether the comment thread should collapse when the thread is resolved."
            ))
        }
    }
});
var CommentAccessibilityHelpNLS;
( (function(CommentAccessibilityHelpNLS) {
    CommentAccessibilityHelpNLS.intro = ( nls.localizeWithPath(
        'vs/workbench/contrib/comments/browser/comments.contribution',
        'intro',
        "The editor contains commentable range(s). Some useful commands include:"
    ));
    CommentAccessibilityHelpNLS.introWidget = ( nls.localizeWithPath(
        'vs/workbench/contrib/comments/browser/comments.contribution',
        'introWidget',
        "This widget contains a text area, for composition of new comments, and actions, that can be tabbed to once tab moves focus mode has been enabled ({0})."
    ));
    CommentAccessibilityHelpNLS.introWidgetNoKb = ( nls.localizeWithPath(
        'vs/workbench/contrib/comments/browser/comments.contribution',
        'introWidgetNoKb',
        "This widget contains a text area, for composition of new comments, and actions, that can be tabbed to once tab moves focus mode has been enabled with the command Toggle Tab Key Moves Focus, which is currently not triggerable via keybinding."
    ));
    CommentAccessibilityHelpNLS.commentCommands = ( nls.localizeWithPath(
        'vs/workbench/contrib/comments/browser/comments.contribution',
        'commentCommands',
        "Some useful comment commands include:"
    ));
    CommentAccessibilityHelpNLS.escape = ( nls.localizeWithPath(
        'vs/workbench/contrib/comments/browser/comments.contribution',
        'escape',
        "- Dismiss Comment (Escape)"
    ));
    CommentAccessibilityHelpNLS.nextRange = ( nls.localizeWithPath(
        'vs/workbench/contrib/comments/browser/comments.contribution',
        'next',
        "- Go to Next Commenting Range ({0})"
    ));
    CommentAccessibilityHelpNLS.nextRangeNoKb = ( nls.localizeWithPath(
        'vs/workbench/contrib/comments/browser/comments.contribution',
        'nextNoKb',
        "- Go to Next Commenting Range, which is currently not triggerable via keybinding."
    ));
    CommentAccessibilityHelpNLS.previousRange = ( nls.localizeWithPath(
        'vs/workbench/contrib/comments/browser/comments.contribution',
        'previous',
        "- Go to Previous Commenting Range ({0})"
    ));
    CommentAccessibilityHelpNLS.previousRangeNoKb = ( nls.localizeWithPath(
        'vs/workbench/contrib/comments/browser/comments.contribution',
        'previousNoKb',
        "- Go to Previous Commenting Range, which is currently not triggerable via keybinding."
    ));
    CommentAccessibilityHelpNLS.nextCommentThreadKb = ( nls.localizeWithPath(
        'vs/workbench/contrib/comments/browser/comments.contribution',
        'nextCommentThreadKb',
        "- Go to Next Comment Thread ({0})"
    ));
    CommentAccessibilityHelpNLS.nextCommentThreadNoKb = ( nls.localizeWithPath(
        'vs/workbench/contrib/comments/browser/comments.contribution',
        'nextCommentThreadNoKb',
        "- Go to Next Comment Thread, which is currently not triggerable via keybinding."
    ));
    CommentAccessibilityHelpNLS.previousCommentThreadKb = ( nls.localizeWithPath(
        'vs/workbench/contrib/comments/browser/comments.contribution',
        'previousCommentThreadKb',
        "- Go to Previous Comment Thread ({0})"
    ));
    CommentAccessibilityHelpNLS.previousCommentThreadNoKb = ( nls.localizeWithPath(
        'vs/workbench/contrib/comments/browser/comments.contribution',
        'previousCommentThreadNoKb',
        "- Go to Previous Comment Thread, which is currently not triggerable via keybinding."
    ));
    CommentAccessibilityHelpNLS.addComment = ( nls.localizeWithPath(
        'vs/workbench/contrib/comments/browser/comments.contribution',
        'addComment',
        "- Add Comment ({0})"
    ));
    CommentAccessibilityHelpNLS.addCommentNoKb = ( nls.localizeWithPath(
        'vs/workbench/contrib/comments/browser/comments.contribution',
        'addCommentNoKb',
        "- Add Comment on Current Selection, which is currently not triggerable via keybinding."
    ));
    CommentAccessibilityHelpNLS.submitComment = ( nls.localizeWithPath(
        'vs/workbench/contrib/comments/browser/comments.contribution',
        'submitComment',
        "- Submit Comment ({0})"
    ));
    CommentAccessibilityHelpNLS.submitCommentNoKb = ( nls.localizeWithPath(
        'vs/workbench/contrib/comments/browser/comments.contribution',
        'submitCommentNoKb',
        "- Submit Comment, accessible via tabbing, as it's currently not triggerable with a keybinding."
    ));
})(CommentAccessibilityHelpNLS || (CommentAccessibilityHelpNLS = {})));
class CommentsAccessibilityHelpContribution extends Disposable {
    constructor() {
        super();
        this._register(AccessibilityHelpAction.addImplementation(110, 'comments', accessor => {
            const instantiationService = accessor.get(IInstantiationService);
            const accessibleViewService = accessor.get(IAccessibleViewService);
            accessibleViewService.show(instantiationService.createInstance(CommentsAccessibilityHelpProvider));
            return true;
        }, ( ContextKeyExpr.or(ctxCommentEditorFocused, CommentContextKeys.commentFocused))));
    }
}
let CommentsAccessibilityHelpProvider = class CommentsAccessibilityHelpProvider {
    constructor(_keybindingService) {
        this._keybindingService = _keybindingService;
        this.verbositySettingKey = "accessibility.verbosity.comments" ;
        this.options = { type: "help"  };
    }
    _descriptionForCommand(commandId, msg, noKbMsg) {
        const kb = this._keybindingService.lookupKeybinding(commandId);
        if (kb) {
            return strings.format(msg, kb.getAriaLabel());
        }
        return strings.format(noKbMsg, commandId);
    }
    provideContent() {
        this._element = document.activeElement;
        const content = [];
        content.push(this._descriptionForCommand(ToggleTabFocusModeAction.ID, CommentAccessibilityHelpNLS.introWidget, CommentAccessibilityHelpNLS.introWidgetNoKb) + '\n');
        content.push(CommentAccessibilityHelpNLS.commentCommands);
        content.push(CommentAccessibilityHelpNLS.escape);
        content.push(this._descriptionForCommand("workbench.action.addComment" , CommentAccessibilityHelpNLS.addComment, CommentAccessibilityHelpNLS.addCommentNoKb));
        content.push(this._descriptionForCommand("editor.action.submitComment" , CommentAccessibilityHelpNLS.submitComment, CommentAccessibilityHelpNLS.submitCommentNoKb));
        content.push(this._descriptionForCommand("editor.action.nextCommentingRange" , CommentAccessibilityHelpNLS.nextRange, CommentAccessibilityHelpNLS.nextRangeNoKb));
        content.push(this._descriptionForCommand("editor.action.previousCommentingRange" , CommentAccessibilityHelpNLS.previousRange, CommentAccessibilityHelpNLS.previousRangeNoKb));
        return content.join('\n');
    }
    onClose() {
        this._element?.focus();
    }
};
CommentsAccessibilityHelpProvider = ( __decorate([
    ( __param(0, IKeybindingService))
], CommentsAccessibilityHelpProvider));
export { CommentAccessibilityHelpNLS, CommentsAccessibilityHelpContribution, CommentsAccessibilityHelpProvider };
