import * as nls from 'monaco-editor/esm/vs/nls.js';
import { RawContextKey } from 'monaco-editor/esm/vs/platform/contextkey/common/contextkey.js';
var CommentContextKeys;
( (function(CommentContextKeys) {
    CommentContextKeys.activeCursorHasCommentingRange = ( new RawContextKey('activeCursorHasCommentingRange', false, {
        description: ( nls.localizeWithPath(
         'vs/workbench/contrib/comments/common/commentContextKeys',
         'hasCommentingRange',
         "Whether the position at the active cursor has a commenting range"
        )),
        type: 'boolean'
    }));
    CommentContextKeys.activeEditorHasCommentingRange = ( new RawContextKey('activeEditorHasCommentingRange', false, {
        description: ( nls.localizeWithPath(
         'vs/workbench/contrib/comments/common/commentContextKeys',
         'editorHasCommentingRange',
         "Whether the active editor has a commenting range"
        )),
        type: 'boolean'
    }));
    CommentContextKeys.WorkspaceHasCommenting = ( new RawContextKey('workspaceHasCommenting', false, {
        description: ( nls.localizeWithPath(
         'vs/workbench/contrib/comments/common/commentContextKeys',
         'hasCommentingProvider',
         "Whether the open workspace has either comments or commenting ranges."
        )),
        type: 'boolean'
    }));
    CommentContextKeys.commentThreadIsEmpty = ( new RawContextKey(
     'commentThreadIsEmpty',
     false,
     { type: 'boolean', description: ( nls.localizeWithPath(
      'vs/workbench/contrib/comments/common/commentContextKeys',
      'commentThreadIsEmpty',
      "Set when the comment thread has no comments"
     )) }
    ));
    CommentContextKeys.commentIsEmpty = ( new RawContextKey('commentIsEmpty', false, { type: 'boolean', description: ( nls.localizeWithPath(
     'vs/workbench/contrib/comments/common/commentContextKeys',
     'commentIsEmpty',
     "Set when the comment has no input"
    )) }));
    CommentContextKeys.commentContext = ( new RawContextKey('comment', undefined, { type: 'string', description: ( nls.localizeWithPath(
     'vs/workbench/contrib/comments/common/commentContextKeys',
     'comment',
     "The context value of the comment"
    )) }));
    CommentContextKeys.commentThreadContext = ( new RawContextKey('commentThread', undefined, { type: 'string', description: ( nls.localizeWithPath(
     'vs/workbench/contrib/comments/common/commentContextKeys',
     'commentThread',
     "The context value of the comment thread"
    )) }));
    CommentContextKeys.commentControllerContext = ( new RawContextKey(
     'commentController',
     undefined,
     { type: 'string', description: ( nls.localizeWithPath(
      'vs/workbench/contrib/comments/common/commentContextKeys',
      'commentController',
      "The comment controller id associated with a comment thread"
     )) }
    ));
    CommentContextKeys.commentFocused = ( new RawContextKey('commentFocused', false, { type: 'boolean', description: ( nls.localizeWithPath(
     'vs/workbench/contrib/comments/common/commentContextKeys',
     'commentFocused',
     "Set when the comment is focused"
    )) }));
})(CommentContextKeys || (CommentContextKeys = {})));
export { CommentContextKeys };
