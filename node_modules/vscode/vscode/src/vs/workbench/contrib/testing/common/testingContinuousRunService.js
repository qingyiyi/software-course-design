import { __decorate, __param } from '../../../../../../../external/tslib/tslib.es6.js';
import { CancellationTokenSource } from 'monaco-editor/esm/vs/base/common/cancellation.js';
import { Disposable, toDisposable } from 'monaco-editor/esm/vs/base/common/lifecycle.js';
import { IContextKeyService } from 'monaco-editor/esm/vs/platform/contextkey/common/contextkey.js';
import { createDecorator } from 'monaco-editor/esm/vs/platform/instantiation/common/instantiation.js';
import { IStorageService } from 'monaco-editor/esm/vs/platform/storage/common/storage.js';
import { StoredValue } from './storedValue.js';
import { TestingContextKeys } from './testingContextKeys.js';
import { ITestService } from './testService.js';
import { Emitter } from 'monaco-editor/esm/vs/base/common/event.js';
import { TestId } from './testId.js';
import { WellDefinedPrefixTree } from '../../../../base/common/prefixTree.js';
const ITestingContinuousRunService = ( createDecorator('testingContinuousRunService'));
let TestingContinuousRunService = class TestingContinuousRunService extends Disposable {
    get lastRunProfileIds() {
        return this.lastRun.get(( new Set()));
    }
    constructor(testService, storageService, contextKeyService) {
        super();
        this.testService = testService;
        this.changeEmitter = ( new Emitter());
        this.running = ( new WellDefinedPrefixTree());
        this.onDidChange = this.changeEmitter.event;
        this.isGloballyOn = TestingContextKeys.isContinuousModeOn.bindTo(contextKeyService);
        this.lastRun = this._register(( new StoredValue({
            key: 'lastContinuousRunProfileIds',
            scope: 1 ,
            target: 1 ,
            serialization: {
                deserialize: v => ( new Set(JSON.parse(v))),
                serialize: v => JSON.stringify([...v])
            },
        }, storageService)));
        this._register(toDisposable(() => {
            this.globallyRunning?.dispose();
            for (const cts of ( this.running.values())) {
                cts.dispose();
            }
        }));
    }
    isSpecificallyEnabledFor(testId) {
        return this.running.size > 0 && this.running.hasKey(TestId.fromString(testId).path);
    }
    isEnabledForAParentOf(testId) {
        if (this.globallyRunning) {
            return true;
        }
        return this.running.size > 0 && this.running.hasKeyOrParent(TestId.fromString(testId).path);
    }
    isEnabledForAChildOf(testId) {
        return this.running.size > 0 && this.running.hasKeyOrChildren(TestId.fromString(testId).path);
    }
    isEnabled() {
        return !!this.globallyRunning || this.running.size > 0;
    }
    start(profile, testId) {
        const cts = ( new CancellationTokenSource());
        if (testId === undefined) {
            this.isGloballyOn.set(true);
        }
        if (!testId) {
            this.globallyRunning?.dispose(true);
            this.globallyRunning = cts;
        }
        else {
            this.running.mutate(TestId.fromString(testId).path, c => {
                c?.dispose(true);
                return cts;
            });
        }
        this.lastRun.store(( new Set(( profile.map(p => p.profileId)))));
        this.testService.startContinuousRun({
            continuous: true,
            targets: ( profile.map(p => ({
                testIds: [testId ?? p.controllerId],
                controllerId: p.controllerId,
                profileGroup: p.group,
                profileId: p.profileId
            }))),
        }, cts.token);
        this.changeEmitter.fire(testId);
    }
    stop(testId) {
        if (!testId) {
            this.globallyRunning?.dispose(true);
            this.globallyRunning = undefined;
        }
        else {
            this.running.delete(TestId.fromString(testId).path)?.dispose(true);
        }
        if (testId === undefined) {
            this.isGloballyOn.set(false);
        }
        this.changeEmitter.fire(testId);
    }
};
TestingContinuousRunService = ( __decorate([
    ( __param(0, ITestService)),
    ( __param(1, IStorageService)),
    ( __param(2, IContextKeyService))
], TestingContinuousRunService));
export { ITestingContinuousRunService, TestingContinuousRunService };
