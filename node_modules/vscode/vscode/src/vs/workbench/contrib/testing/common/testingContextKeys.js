import { localizeWithPath } from 'monaco-editor/esm/vs/nls.js';
import { RawContextKey } from 'monaco-editor/esm/vs/platform/contextkey/common/contextkey.js';
var TestingContextKeys;
( (function(TestingContextKeys) {
    TestingContextKeys.providerCount = ( new RawContextKey('testing.providerCount', 0));
    TestingContextKeys.canRefreshTests = ( new RawContextKey(
        'testing.canRefresh',
        false,
        { type: 'boolean', description: ( localizeWithPath(
            'vs/workbench/contrib/testing/common/testingContextKeys',
            'testing.canRefresh',
            'Indicates whether any test controller has an attached refresh handler.'
        )) }
    ));
    TestingContextKeys.isRefreshingTests = ( new RawContextKey(
        'testing.isRefreshing',
        false,
        { type: 'boolean', description: ( localizeWithPath(
            'vs/workbench/contrib/testing/common/testingContextKeys',
            'testing.isRefreshing',
            'Indicates whether any test controller is currently refreshing tests.'
        )) }
    ));
    TestingContextKeys.isContinuousModeOn = ( new RawContextKey(
        'testing.isContinuousModeOn',
        false,
        { type: 'boolean', description: ( localizeWithPath(
            'vs/workbench/contrib/testing/common/testingContextKeys',
            'testing.isContinuousModeOn',
            'Indicates whether continuous test mode is on.'
        )) }
    ));
    TestingContextKeys.hasDebuggableTests = ( new RawContextKey(
        'testing.hasDebuggableTests',
        false,
        { type: 'boolean', description: ( localizeWithPath(
            'vs/workbench/contrib/testing/common/testingContextKeys',
            'testing.hasDebuggableTests',
            'Indicates whether any test controller has registered a debug configuration'
        )) }
    ));
    TestingContextKeys.hasRunnableTests = ( new RawContextKey(
        'testing.hasRunnableTests',
        false,
        { type: 'boolean', description: ( localizeWithPath(
            'vs/workbench/contrib/testing/common/testingContextKeys',
            'testing.hasRunnableTests',
            'Indicates whether any test controller has registered a run configuration'
        )) }
    ));
    TestingContextKeys.hasCoverableTests = ( new RawContextKey(
        'testing.hasCoverableTests',
        false,
        { type: 'boolean', description: ( localizeWithPath(
            'vs/workbench/contrib/testing/common/testingContextKeys',
            'testing.hasCoverableTests',
            'Indicates whether any test controller has registered a coverage configuration'
        )) }
    ));
    TestingContextKeys.hasNonDefaultProfile = ( new RawContextKey(
        'testing.hasNonDefaultProfile',
        false,
        { type: 'boolean', description: ( localizeWithPath(
            'vs/workbench/contrib/testing/common/testingContextKeys',
            'testing.hasNonDefaultConfig',
            'Indicates whether any test controller has registered a non-default configuration'
        )) }
    ));
    TestingContextKeys.hasConfigurableProfile = ( new RawContextKey(
        'testing.hasConfigurableProfile',
        false,
        { type: 'boolean', description: ( localizeWithPath(
            'vs/workbench/contrib/testing/common/testingContextKeys',
            'testing.hasConfigurableConfig',
            'Indicates whether any test configuration can be configured'
        )) }
    ));
    TestingContextKeys.supportsContinuousRun = ( new RawContextKey(
        'testing.supportsContinuousRun',
        false,
        { type: 'boolean', description: ( localizeWithPath(
            'vs/workbench/contrib/testing/common/testingContextKeys',
            'testing.supportsContinuousRun',
            'Indicates whether continous test running is supported'
        )) }
    ));
    TestingContextKeys.isParentRunningContinuously = ( new RawContextKey(
        'testing.isParentRunningContinuously',
        false,
        { type: 'boolean', description: ( localizeWithPath(
            'vs/workbench/contrib/testing/common/testingContextKeys',
            'testing.isParentRunningContinuously',
            'Indicates whether the parent of a test is continuously running, set in the menu context of test items'
        )) }
    ));
    TestingContextKeys.activeEditorHasTests = ( new RawContextKey(
        'testing.activeEditorHasTests',
        false,
        { type: 'boolean', description: ( localizeWithPath(
            'vs/workbench/contrib/testing/common/testingContextKeys',
            'testing.activeEditorHasTests',
            'Indicates whether any tests are present in the current editor'
        )) }
    ));
    TestingContextKeys.capabilityToContextKey = {
        [2 ]: TestingContextKeys.hasRunnableTests,
        [8 ]: TestingContextKeys.hasCoverableTests,
        [4 ]: TestingContextKeys.hasDebuggableTests,
        [16 ]: TestingContextKeys.hasNonDefaultProfile,
        [32 ]: TestingContextKeys.hasConfigurableProfile,
        [64 ]: TestingContextKeys.supportsContinuousRun,
    };
    TestingContextKeys.hasAnyResults = ( new RawContextKey('testing.hasAnyResults', false));
    TestingContextKeys.viewMode = ( new RawContextKey('testing.explorerViewMode', "list" ));
    TestingContextKeys.viewSorting = ( new RawContextKey(
        'testing.explorerViewSorting',
        "location"
    ));
    TestingContextKeys.isRunning = ( new RawContextKey('testing.isRunning', false));
    TestingContextKeys.isInPeek = ( new RawContextKey('testing.isInPeek', false));
    TestingContextKeys.isPeekVisible = ( new RawContextKey('testing.isPeekVisible', false));
    TestingContextKeys.peekItemType = ( new RawContextKey('peekItemType', undefined, {
        type: 'string',
        description: ( localizeWithPath(
            'vs/workbench/contrib/testing/common/testingContextKeys',
            'testing.peekItemType',
            'Type of the item in the output peek view. Either a "test", "message", "task", or "result".'
        )),
    }));
    TestingContextKeys.controllerId = ( new RawContextKey('controllerId', undefined, {
        type: 'string',
        description: ( localizeWithPath(
            'vs/workbench/contrib/testing/common/testingContextKeys',
            'testing.controllerId',
            'Controller ID of the current test item'
        ))
    }));
    TestingContextKeys.testItemExtId = ( new RawContextKey('testId', undefined, {
        type: 'string',
        description: ( localizeWithPath(
            'vs/workbench/contrib/testing/common/testingContextKeys',
            'testing.testId',
            'ID of the current test item, set when creating or opening menus on test items'
        ))
    }));
    TestingContextKeys.testItemHasUri = ( new RawContextKey('testing.testItemHasUri', false, {
        type: 'boolean',
        description: ( localizeWithPath(
            'vs/workbench/contrib/testing/common/testingContextKeys',
            'testing.testItemHasUri',
            'Boolean indicating whether the test item has a URI defined'
        ))
    }));
    TestingContextKeys.testItemIsHidden = ( new RawContextKey('testing.testItemIsHidden', false, {
        type: 'boolean',
        description: ( localizeWithPath(
            'vs/workbench/contrib/testing/common/testingContextKeys',
            'testing.testItemIsHidden',
            'Boolean indicating whether the test item is hidden'
        ))
    }));
    TestingContextKeys.testMessageContext = ( new RawContextKey('testMessage', undefined, {
        type: 'string',
        description: ( localizeWithPath(
            'vs/workbench/contrib/testing/common/testingContextKeys',
            'testing.testMessage',
            'Value set in `testMessage.contextValue`, available in editor/content and testing/message/context'
        ))
    }));
    TestingContextKeys.testResultOutdated = ( new RawContextKey('testResultOutdated', undefined, {
        type: 'boolean',
        description: ( localizeWithPath(
            'vs/workbench/contrib/testing/common/testingContextKeys',
            'testing.testResultOutdated',
            'Value available in editor/content and testing/message/context when the result is outdated'
        ))
    }));
})(TestingContextKeys || (TestingContextKeys = {})));
export { TestingContextKeys };
