import { __decorate, __param } from '../../../../../../../external/tslib/tslib.es6.js';
import { Disposable, DisposableStore } from 'monaco-editor/esm/vs/base/common/lifecycle.js';
import { IStorageService } from 'monaco-editor/esm/vs/platform/storage/common/storage.js';
const defaultSerialization = {
    deserialize: d => JSON.parse(d),
    serialize: d => JSON.stringify(d),
};
let StoredValue = class StoredValue extends Disposable {
    constructor(options, storage) {
        super();
        this.storage = storage;
        this.key = options.key;
        this.scope = options.scope;
        this.target = options.target;
        this.serialization = options.serialization ?? defaultSerialization;
        this.onDidChange = this.storage.onDidChangeValue(this.scope, this.key, this._register(( new DisposableStore())));
    }
    get(defaultValue) {
        if (this.value === undefined) {
            const value = this.storage.get(this.key, this.scope);
            this.value = value === undefined ? defaultValue : this.serialization.deserialize(value);
        }
        return this.value;
    }
    store(value) {
        this.value = value;
        this.storage.store(this.key, this.serialization.serialize(value), this.scope, this.target);
    }
    delete() {
        this.storage.remove(this.key, this.scope);
    }
};
StoredValue = ( __decorate([
    ( __param(1, IStorageService))
], StoredValue));
export { StoredValue };
