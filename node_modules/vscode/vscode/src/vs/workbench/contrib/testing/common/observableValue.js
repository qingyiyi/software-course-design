import { Event, Emitter } from 'monaco-editor/esm/vs/base/common/event.js';
import { Disposable } from 'monaco-editor/esm/vs/base/common/lifecycle.js';
const staticObservableValue = (value) => ({
    onDidChange: Event.None,
    value,
});
class MutableObservableValue extends Disposable {
    get value() {
        return this._value;
    }
    set value(v) {
        if (v !== this._value) {
            this._value = v;
            this.changeEmitter.fire(v);
        }
    }
    static stored(stored, defaultValue) {
        const o = ( new MutableObservableValue(stored.get(defaultValue)));
        o._register(stored);
        o._register(o.onDidChange(value => stored.store(value)));
        return o;
    }
    constructor(_value) {
        super();
        this._value = _value;
        this.changeEmitter = this._register(( new Emitter()));
        this.onDidChange = this.changeEmitter.event;
    }
}
export { MutableObservableValue, staticObservableValue };
