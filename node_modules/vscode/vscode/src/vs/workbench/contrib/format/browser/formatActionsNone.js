import { registerEditorAction, EditorAction } from 'monaco-editor/esm/vs/editor/browser/editorExtensions.js';
import { EditorContextKeys } from 'monaco-editor/esm/vs/editor/common/editorContextKeys.js';
import * as nls from 'monaco-editor/esm/vs/nls.js';
import { ContextKeyExpr } from 'monaco-editor/esm/vs/platform/contextkey/common/contextkey.js';
import { ICommandService } from 'monaco-editor/esm/vs/platform/commands/common/commands.js';
import { INotificationService } from 'monaco-editor/esm/vs/platform/notification/common/notification.js';
import { VIEWLET_ID } from '../../extensions/common/extensions.js';
import '../../../../../../../override/vs/platform/dialogs/common/dialogs.js';
import { IPaneCompositePartService } from '../../../services/panecomposite/browser/panecomposite.js';
import { ILanguageFeaturesService } from 'monaco-editor/esm/vs/editor/common/services/languageFeatures.js';
import { IDialogService } from '../../../../platform/dialogs/common/dialogs.js';
async function showExtensionQuery(paneCompositeService, query) {
    const viewlet = await paneCompositeService.openPaneComposite(VIEWLET_ID, 0 , true);
    if (viewlet) {
        (viewlet?.getViewPaneContainer()).search(query);
    }
}
registerEditorAction(class FormatDocumentMultipleAction extends EditorAction {
    constructor() {
        super({
            id: 'editor.action.formatDocument.none',
            label: ( nls.localizeWithPath(
                'vs/workbench/contrib/format/browser/formatActionsNone',
                'formatDocument.label.multiple',
                "Format Document"
            )),
            alias: 'Format Document',
            precondition: ( ContextKeyExpr.and(EditorContextKeys.writable, ( EditorContextKeys.hasDocumentFormattingProvider.toNegated()))),
            kbOpts: {
                kbExpr: EditorContextKeys.editorTextFocus,
                primary: 1024  | 512  | 36 ,
                linux: { primary: 2048  | 1024  | 39  },
                weight: 100 ,
            }
        });
    }
    async run(accessor, editor) {
        if (!editor.hasModel()) {
            return;
        }
        const commandService = accessor.get(ICommandService);
        const paneCompositeService = accessor.get(IPaneCompositePartService);
        const notificationService = accessor.get(INotificationService);
        const dialogService = accessor.get(IDialogService);
        const languageFeaturesService = accessor.get(ILanguageFeaturesService);
        const model = editor.getModel();
        const formatterCount = languageFeaturesService.documentFormattingEditProvider.all(model).length;
        if (formatterCount > 1) {
            return commandService.executeCommand('editor.action.formatDocument.multiple');
        }
        else if (formatterCount === 1) {
            return commandService.executeCommand('editor.action.formatDocument');
        }
        else if (model.isTooLargeForSyncing()) {
            notificationService.warn(( nls.localizeWithPath(
                'vs/workbench/contrib/format/browser/formatActionsNone',
                'too.large',
                "This file cannot be formatted because it is too large"
            )));
        }
        else {
            const langName = model.getLanguageId();
            const message = ( nls.localizeWithPath(
                'vs/workbench/contrib/format/browser/formatActionsNone',
                'no.provider',
                "There is no formatter for '{0}' files installed.",
                langName
            ));
            const { confirmed } = await dialogService.confirm({
                message,
                primaryButton: ( nls.localizeWithPath(
                    'vs/workbench/contrib/format/browser/formatActionsNone',
                    { key: 'install.formatter', comment: ['&& denotes a mnemonic'] },
                    "&&Install Formatter..."
                ))
            });
            if (confirmed) {
                showExtensionQuery(paneCompositeService, `category:formatters ${langName}`);
            }
        }
    }
});
