import { Event } from '../../../../base/common/event.js';
import { ITerminalStatus } from '../common/terminal.js';

interface ITerminalStatusList {
    /** Gets the most recent, highest severity status. */
    readonly primary: ITerminalStatus | undefined;
    /** Gets all active statues. */
    readonly statuses: ITerminalStatus[];
    readonly onDidAddStatus: Event<ITerminalStatus>;
    readonly onDidRemoveStatus: Event<ITerminalStatus>;
    readonly onDidChangePrimaryStatus: Event<ITerminalStatus | undefined>;
    /**
     * Adds a status to the list.
     * @param status The status object. Ideally a single status object that does not change will be
     * shared as this call will no-op if the status is already set (checked by by object reference).
     * @param duration An optional duration in milliseconds of the status, when specified the status
     * will remove itself when the duration elapses unless the status gets re-added.
     */
    add(status: ITerminalStatus, duration?: number): void;
    remove(status: ITerminalStatus): void;
    remove(statusId: string): void;
    toggle(status: ITerminalStatus, value: boolean): void;
}

export type { ITerminalStatusList };
