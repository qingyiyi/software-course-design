import { Event } from '../../../../../base/common/event.js';
import { Terminal } from '../../../../../../../../external/xterm/typings/xterm.js';
import { CanvasAddon } from '../../../../../../../../external/xterm-addon-canvas/typings/xterm-addon-canvas.js';
import { ISearchOptions, SearchAddon } from '../../../../../../../../external/xterm-addon-search/typings/xterm-addon-search.js';
import { Unicode11Addon } from '../../../../../../../../external/xterm-addon-unicode11/typings/xterm-addon-unicode11.js';
import { WebglAddon } from '../../../../../../../../external/xterm-addon-webgl/typings/xterm-addon-webgl.js';
import { SerializeAddon } from '../../../../../../../../external/xterm-addon-serialize/typings/xterm-addon-serialize.js';
import { ImageAddon } from '../../../../../../../../external/xterm-addon-image/typings/xterm-addon-image.js';
import { IConfigurationService } from '../../../../../platform/configuration/common/configuration.js';
import { TerminalConfigHelper } from '../terminalConfigHelper.js';
import { Disposable } from '../../../../../base/common/lifecycle.js';
import { IShellIntegration, ITerminalLogService } from '../../../../../platform/terminal/common/terminal.js';
import { ITerminalFont } from '../../common/terminal.js';
import { IXtermTerminal, IDetachedXtermTerminal, IInternalXtermTerminal, IMarkTracker, ISuggestController, IXtermColorProvider, IXtermAttachToElementOptions } from '../terminal.js';
import { IStorageService } from '../../../../../platform/storage/common/storage.js';
import { INotificationService } from '../../../../../platform/notification/common/notification.js';
import { IThemeService } from '../../../../../platform/theme/common/themeService.js';
import { IInstantiationService } from '../../../../../platform/instantiation/common/instantiation.js';
import { ITerminalCommand, ITerminalCapabilityStore } from '../../../../../platform/terminal/common/capabilities/capabilities.js';
import { ITelemetryService } from '../../../../../platform/telemetry/common/telemetry.js';
import { IContextKey, IContextKeyService } from '../../../../../platform/contextkey/common/contextkey.js';
import { IClipboardService } from '../../../../../platform/clipboard/common/clipboardService.js';

/**
 * Wraps the xterm object with additional functionality. Interaction with the backing process is out
 * of the scope of this class.
 */
declare class XtermTerminal extends Disposable implements IXtermTerminal, IDetachedXtermTerminal, IInternalXtermTerminal {
    private readonly _configHelper;
    private readonly _backgroundColorProvider;
    private readonly _capabilities;
    private readonly _terminalSuggestWidgetVisibleContextKey;
    private readonly _configurationService;
    private readonly _instantiationService;
    private readonly _logService;
    private readonly _notificationService;
    private readonly _storageService;
    private readonly _themeService;
    private readonly _telemetryService;
    private readonly _clipboardService;
    /** The raw xterm.js instance */
    readonly raw: Terminal;
    private _core;
    private static _suggestedRendererType;
    private static _checkedWebglCompatible;
    private _attached?;
    private _isPhysicalMouseWheel;
    private _markNavigationAddon;
    private _shellIntegrationAddon;
    private _decorationAddon;
    private _suggestAddon?;
    private _canvasAddon?;
    private _searchAddon?;
    private _unicode11Addon?;
    private _webglAddon?;
    private _serializeAddon?;
    private _imageAddon?;
    private readonly _attachedDisposables;
    private readonly _anyTerminalFocusContextKey;
    private readonly _anyFocusedTerminalHasSelection;
    private _lastFindResult;
    get findResult(): {
        resultIndex: number;
        resultCount: number;
    } | undefined;
    get isStdinDisabled(): boolean;
    private readonly _onDidRequestRunCommand;
    readonly onDidRequestRunCommand: Event<{
        command: ITerminalCommand;
        copyAsHtml?: boolean | undefined;
        noNewLine?: boolean | undefined;
    }>;
    private readonly _onDidRequestFocus;
    readonly onDidRequestFocus: Event<void>;
    private readonly _onDidRequestSendText;
    readonly onDidRequestSendText: Event<string>;
    private readonly _onDidRequestFreePort;
    readonly onDidRequestFreePort: Event<string>;
    private readonly _onDidChangeFindResults;
    readonly onDidChangeFindResults: Event<{
        resultIndex: number;
        resultCount: number;
    }>;
    private readonly _onDidChangeSelection;
    readonly onDidChangeSelection: Event<void>;
    private readonly _onDidChangeFocus;
    readonly onDidChangeFocus: Event<boolean>;
    private readonly _onDidDispose;
    readonly onDidDispose: Event<void>;
    get markTracker(): IMarkTracker;
    get shellIntegration(): IShellIntegration;
    get suggestController(): ISuggestController | undefined;
    get textureAtlas(): Promise<ImageBitmap> | undefined;
    get isFocused(): boolean;
    /**
     * @param xtermCtor The xterm.js constructor, this is passed in so it can be fetched lazily
     * outside of this class such that {@link raw} is not nullable.
     */
    constructor(xtermCtor: typeof Terminal, _configHelper: TerminalConfigHelper, cols: number, rows: number, _backgroundColorProvider: IXtermColorProvider, _capabilities: ITerminalCapabilityStore, shellIntegrationNonce: string, _terminalSuggestWidgetVisibleContextKey: IContextKey<boolean> | undefined, disableShellIntegrationReporting: boolean, _configurationService: IConfigurationService, _instantiationService: IInstantiationService, _logService: ITerminalLogService, _notificationService: INotificationService, _storageService: IStorageService, _themeService: IThemeService, _telemetryService: ITelemetryService, _clipboardService: IClipboardService, contextKeyService: IContextKeyService);
    getBufferReverseIterator(): IterableIterator<string>;
    getContentsAsHtml(): Promise<string>;
    getSelectionAsHtml(command?: ITerminalCommand): Promise<string>;
    attachToElement(container: HTMLElement, partialOptions?: Partial<IXtermAttachToElementOptions>): HTMLElement;
    private _setFocused;
    write(data: string | Uint8Array, callback?: () => void): void;
    resize(columns: number, rows: number): void;
    updateConfig(): void;
    private _updateSmoothScrolling;
    private _shouldLoadWebgl;
    private _shouldLoadCanvas;
    forceRedraw(): void;
    clearDecorations(): void;
    forceRefresh(): void;
    forceUnpause(): void;
    findNext(term: string, searchOptions: ISearchOptions): Promise<boolean>;
    findPrevious(term: string, searchOptions: ISearchOptions): Promise<boolean>;
    private _updateFindColors;
    private _searchAddonPromise;
    private _getSearchAddon;
    clearSearchDecorations(): void;
    clearActiveSearchDecoration(): void;
    getFont(): ITerminalFont;
    getLongestViewportWrappedLineLength(): number;
    private _getWrappedLineCount;
    scrollDownLine(): void;
    scrollDownPage(): void;
    scrollToBottom(): void;
    scrollUpLine(): void;
    scrollUpPage(): void;
    scrollToTop(): void;
    clearBuffer(): void;
    hasSelection(): boolean;
    clearSelection(): void;
    selectMarkedRange(fromMarkerId: string, toMarkerId: string, scrollIntoView?: boolean): void;
    selectAll(): void;
    focus(): void;
    copySelection(asHtml?: boolean, command?: ITerminalCommand): Promise<void>;
    private _setCursorBlink;
    private _setCursorStyle;
    private _setCursorStyleInactive;
    private _setCursorWidth;
    private _enableWebglRenderer;
    private _disableWebglForThisSession;
    private _enableCanvasRenderer;
    protected _getCanvasAddonConstructor(): Promise<typeof CanvasAddon>;
    private _refreshImageAddon;
    protected _getImageAddonConstructor(): Promise<typeof ImageAddon>;
    protected _getSearchAddonConstructor(): Promise<typeof SearchAddon>;
    protected _getUnicode11Constructor(): Promise<typeof Unicode11Addon>;
    protected _getWebglAddonConstructor(): Promise<typeof WebglAddon>;
    protected _getSerializeAddonConstructor(): Promise<typeof SerializeAddon>;
    private _disposeOfCanvasRenderer;
    private _disposeOfWebglRenderer;
    private _measureRenderTime;
    private _getXtermTheme;
    private _updateTheme;
    refresh(): void;
    private _updateUnicodeVersion;
    _writeText(data: string): void;
    dispose(): void;
}

export { XtermTerminal };
