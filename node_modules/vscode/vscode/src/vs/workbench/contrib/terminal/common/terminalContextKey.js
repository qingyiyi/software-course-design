import { localizeWithPath } from 'monaco-editor/esm/vs/nls.js';
import { RawContextKey } from 'monaco-editor/esm/vs/platform/contextkey/common/contextkey.js';
var TerminalContextKeys;
( (function(TerminalContextKeys) {
    TerminalContextKeys.isOpen = ( new RawContextKey("terminalIsOpen" , false, true));
    TerminalContextKeys.focus = ( new RawContextKey(
        "terminalFocus" ,
        false,
        ( localizeWithPath(
            'vs/workbench/contrib/terminal/common/terminalContextKey',
            'terminalFocusContextKey',
            "Whether the terminal is focused."
        ))
    ));
    TerminalContextKeys.focusInAny = ( new RawContextKey(
        "terminalFocusInAny" ,
        false,
        ( localizeWithPath(
            'vs/workbench/contrib/terminal/common/terminalContextKey',
            'terminalFocusInAnyContextKey',
            "Whether any terminal is focused, including detached terminals used in other UI."
        ))
    ));
    TerminalContextKeys.editorFocus = ( new RawContextKey(
        "terminalEditorFocus" ,
        false,
        ( localizeWithPath(
            'vs/workbench/contrib/terminal/common/terminalContextKey',
            'terminalEditorFocusContextKey',
            "Whether a terminal in the editor area is focused."
        ))
    ));
    TerminalContextKeys.count = ( new RawContextKey("terminalCount" , 0, ( localizeWithPath(
        'vs/workbench/contrib/terminal/common/terminalContextKey',
        'terminalCountContextKey',
        "The current number of terminals."
    ))));
    TerminalContextKeys.groupCount = ( new RawContextKey("terminalGroupCount" , 0, true));
    TerminalContextKeys.tabsNarrow = ( new RawContextKey(
        "isTerminalTabsNarrow" ,
        false,
        true
    ));
    TerminalContextKeys.terminalHasFixedWidth = ( new RawContextKey(
        "terminalHasFixedWidth" ,
        false,
        true
    ));
    TerminalContextKeys.tabsFocus = ( new RawContextKey(
        "terminalTabsFocus" ,
        false,
        ( localizeWithPath(
            'vs/workbench/contrib/terminal/common/terminalContextKey',
            'terminalTabsFocusContextKey',
            "Whether the terminal tabs widget is focused."
        ))
    ));
    TerminalContextKeys.webExtensionContributedProfile = ( new RawContextKey(
        "terminalWebExtensionContributedProfile" ,
        false,
        true
    ));
    TerminalContextKeys.terminalHasBeenCreated = ( new RawContextKey(
        "terminalHasBeenCreated" ,
        false,
        true
    ));
    TerminalContextKeys.terminalEditorActive = ( new RawContextKey(
        "terminalEditorActive" ,
        false,
        true
    ));
    TerminalContextKeys.tabsMouse = ( new RawContextKey("terminalTabsMouse" , false, true));
    TerminalContextKeys.shellType = ( new RawContextKey(
        "terminalShellType" ,
        undefined,
        { type: 'string', description: ( localizeWithPath(
            'vs/workbench/contrib/terminal/common/terminalContextKey',
            'terminalShellTypeContextKey',
            "The shell type of the active terminal, this is set to the last known value when no terminals exist."
        )) }
    ));
    TerminalContextKeys.altBufferActive = ( new RawContextKey(
        "terminalAltBufferActive" ,
        false,
        ( localizeWithPath(
            'vs/workbench/contrib/terminal/common/terminalContextKey',
            'terminalAltBufferActive',
            "Whether the terminal's alt buffer is active."
        ))
    ));
    TerminalContextKeys.suggestWidgetVisible = ( new RawContextKey(
        "terminalSuggestWidgetVisible" ,
        false,
        ( localizeWithPath(
            'vs/workbench/contrib/terminal/common/terminalContextKey',
            'terminalSuggestWidgetVisible',
            "Whether the terminal's suggest widget is visible."
        ))
    ));
    TerminalContextKeys.notFocus = ( TerminalContextKeys.focus.toNegated());
    TerminalContextKeys.viewShowing = ( new RawContextKey(
        "terminalViewShowing" ,
        false,
        ( localizeWithPath(
            'vs/workbench/contrib/terminal/common/terminalContextKey',
            'terminalViewShowing',
            "Whether the terminal view is showing"
        ))
    ));
    TerminalContextKeys.textSelected = ( new RawContextKey(
        "terminalTextSelected" ,
        false,
        ( localizeWithPath(
            'vs/workbench/contrib/terminal/common/terminalContextKey',
            'terminalTextSelectedContextKey',
            "Whether text is selected in the active terminal."
        ))
    ));
    TerminalContextKeys.textSelectedInFocused = ( new RawContextKey(
        "terminalTextSelectedInFocused" ,
        false,
        ( localizeWithPath(
            'vs/workbench/contrib/terminal/common/terminalContextKey',
            'terminalTextSelectedInFocusedContextKey',
            "Whether text is selected in a focused terminal."
        ))
    ));
    TerminalContextKeys.notTextSelected = ( TerminalContextKeys.textSelected.toNegated());
    TerminalContextKeys.findVisible = ( new RawContextKey(
        "terminalFindVisible" ,
        false,
        true
    ));
    TerminalContextKeys.notFindVisible = ( TerminalContextKeys.findVisible.toNegated());
    TerminalContextKeys.findInputFocus = ( new RawContextKey(
        "terminalFindInputFocused" ,
        false,
        true
    ));
    TerminalContextKeys.findFocus = ( new RawContextKey(
        "terminalFindFocused" ,
        false,
        true
    ));
    TerminalContextKeys.notFindFocus = ( TerminalContextKeys.findInputFocus.toNegated());
    TerminalContextKeys.processSupported = ( new RawContextKey(
        "terminalProcessSupported" ,
        false,
        ( localizeWithPath(
            'vs/workbench/contrib/terminal/common/terminalContextKey',
            'terminalProcessSupportedContextKey',
            "Whether terminal processes can be launched in the current workspace."
        ))
    ));
    TerminalContextKeys.tabsSingularSelection = ( new RawContextKey(
        "terminalTabsSingularSelection" ,
        false,
        ( localizeWithPath(
            'vs/workbench/contrib/terminal/common/terminalContextKey',
            'terminalTabsSingularSelectedContextKey',
            "Whether one terminal is selected in the terminal tabs list."
        ))
    ));
    TerminalContextKeys.splitTerminal = ( new RawContextKey(
        "terminalSplitTerminal" ,
        false,
        ( localizeWithPath(
            'vs/workbench/contrib/terminal/common/terminalContextKey',
            'isSplitTerminalContextKey',
            "Whether the focused tab's terminal is a split terminal."
        ))
    ));
    TerminalContextKeys.inTerminalRunCommandPicker = ( new RawContextKey(
        "inTerminalRunCommandPicker" ,
        false,
        ( localizeWithPath(
            'vs/workbench/contrib/terminal/common/terminalContextKey',
            'inTerminalRunCommandPickerContextKey',
            "Whether the terminal run command picker is currently open."
        ))
    ));
    TerminalContextKeys.terminalShellIntegrationEnabled = ( new RawContextKey(
        "terminalShellIntegrationEnabled" ,
        false,
        ( localizeWithPath(
            'vs/workbench/contrib/terminal/common/terminalContextKey',
            'terminalShellIntegrationEnabled',
            "Whether shell integration is enabled in the active terminal"
        ))
    ));
})(TerminalContextKeys || (TerminalContextKeys = {})));
export { TerminalContextKeys };
