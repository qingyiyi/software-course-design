const unset = Symbol('unset');
class WellDefinedPrefixTree {
    constructor() {
        this.root = ( new Node());
        this._size = 0;
    }
    get size() {
        return this._size;
    }
    insert(key, value) {
        this.opNode(key, n => n.value = value);
    }
    mutate(key, mutate) {
        this.opNode(key, n => n.value = mutate(n.value === unset ? undefined : n.value));
    }
    delete(key) {
        const path = [{ part: '', node: this.root }];
        let i = 0;
        for (const part of key) {
            const node = path[i].node.children?.get(part);
            if (!node) {
                return undefined;
            }
            path.push({ part, node });
            i++;
        }
        const value = path[i].node.value;
        if (value === unset) {
            return;
        }
        this._size--;
        for (; i > 0; i--) {
            const parent = path[i - 1];
            parent.node.children.delete(path[i].part);
            if (parent.node.children.size > 0 || parent.node.value !== unset) {
                break;
            }
        }
        return value;
    }
    find(key) {
        let node = this.root;
        for (const segment of key) {
            const next = node.children?.get(segment);
            if (!next) {
                return undefined;
            }
            node = next;
        }
        return node.value === unset ? undefined : node.value;
    }
    hasKeyOrParent(key) {
        let node = this.root;
        for (const segment of key) {
            const next = node.children?.get(segment);
            if (!next) {
                return false;
            }
            if (next.value !== unset) {
                return true;
            }
            node = next;
        }
        return false;
    }
    hasKeyOrChildren(key) {
        let node = this.root;
        for (const segment of key) {
            const next = node.children?.get(segment);
            if (!next) {
                return false;
            }
            node = next;
        }
        return true;
    }
    hasKey(key) {
        let node = this.root;
        for (const segment of key) {
            const next = node.children?.get(segment);
            if (!next) {
                return false;
            }
            node = next;
        }
        return node.value !== unset;
    }
    opNode(key, fn) {
        let node = this.root;
        for (const part of key) {
            if (!node.children) {
                const next = ( new Node());
                node.children = ( new Map([[part, next]]));
                node = next;
            }
            else if (!( node.children.has(part))) {
                const next = ( new Node());
                node.children.set(part, next);
                node = next;
            }
            else {
                node = node.children.get(part);
            }
        }
        if (node.value === unset) {
            this._size++;
        }
        fn(node);
    }
    *values() {
        const stack = [this.root];
        while (stack.length > 0) {
            const node = stack.pop();
            if (node.value !== unset) {
                yield node.value;
            }
            if (node.children) {
                for (const child of ( node.children.values())) {
                    stack.push(child);
                }
            }
        }
    }
}
class Node {
    constructor() {
        this.value = unset;
    }
}
export { WellDefinedPrefixTree };
