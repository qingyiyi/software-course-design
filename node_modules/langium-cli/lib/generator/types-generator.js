import { joinToNode, toString } from 'langium/generate';
import { collectAst, LangiumGrammarGrammar } from 'langium/grammar';
import { collectKeywords } from './langium-util.js';
export function generateTypesFile(services, grammars) {
    const { unions, interfaces } = collectAst(grammars, services.shared.workspace.LangiumDocuments);
    const reservedWords = new Set(collectKeywords(LangiumGrammarGrammar()));
    const fileNode = joinToNode([
        joinToNode(unions, union => union.toDeclaredTypesString(reservedWords), { appendNewLineIfNotEmpty: true }),
        joinToNode(interfaces, iFace => iFace.toDeclaredTypesString(reservedWords), { appendNewLineIfNotEmpty: true })
    ]);
    return toString(fileNode);
}
//# sourceMappingURL=types-generator.js.map