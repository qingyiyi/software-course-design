import { editor } from 'monaco-editor';
import { InitializeServiceConfig, MonacoLanguageClient } from 'monaco-languageclient';
import { EditorAppExtended, EditorAppConfigExtended } from './editorAppExtended.js';
import { EditorAppClassic, EditorAppConfigClassic } from './editorAppClassic.js';
import { ModelUpdate } from './editorAppBase.js';
import { LanguageClientConfig, LanguageClientWrapper } from './languageClientWrapper.js';
import { LoggerConfig } from './logger.js';
export type WrapperConfig = {
    serviceConfig?: InitializeServiceConfig;
    editorAppConfig: EditorAppConfigExtended | EditorAppConfigClassic;
};
export type UserConfig = {
    id?: string;
    loggerConfig?: LoggerConfig;
    wrapperConfig: WrapperConfig;
    languageClientConfig?: LanguageClientConfig;
};
/**
 * This class is responsible for the overall ochestration.
 * It inits, start and disposes the editor apps and the language client (if configured) and provides
 * access to all required components.
 */
export declare class MonacoEditorLanguageClientWrapper {
    private id;
    private editorApp;
    private languageClientWrapper;
    private logger;
    private initDone;
    /**
     * Perform an isolated initialization of the user services and the languageclient wrapper (if used).
     */
    init(userConfig: UserConfig): Promise<void>;
    /**
     * Child classes are allow to override the services configuration implementation.
     */
    protected configureServices(serviceConfig: InitializeServiceConfig): void;
    /**
     * Performs a full user configuration and the languageclient wrapper (if used) init and then start the application.
     */
    initAndStart(userConfig: UserConfig, htmlElement: HTMLElement | null): Promise<void>;
    /**
     * Does not perform any user configuration or other application init and just starts the application.
     */
    start(htmlElement: HTMLElement | null): Promise<void>;
    isStarted(): boolean;
    getMonacoEditorApp(): EditorAppExtended | EditorAppClassic | undefined;
    getEditor(): editor.IStandaloneCodeEditor | undefined;
    getDiffEditor(): editor.IStandaloneDiffEditor | undefined;
    getLanguageClientWrapper(): LanguageClientWrapper | undefined;
    getLanguageClient(): MonacoLanguageClient | undefined;
    getModel(original?: boolean): editor.ITextModel | undefined;
    getWorker(): Worker | undefined;
    updateModel(modelUpdate: ModelUpdate): Promise<void>;
    updateDiffModel(modelUpdate: ModelUpdate): Promise<void>;
    reportStatus(): string[];
    /**
     * Disposes all application and editor resources, plus the languageclient (if used).
     */
    dispose(): Promise<void>;
    updateLayout(): void;
}
//# sourceMappingURL=wrapper.d.ts.map