import getThemeServiceOverride from '@codingame/monaco-vscode-theme-service-override';
import getTextmateServiceOverride from '@codingame/monaco-vscode-textmate-service-override';
import { whenReady as whenReadyTheme } from '@codingame/monaco-vscode-theme-defaults-default-extension';
import { EditorAppBase, ModelUpdateType, isEqual, isModelUpdateRequired } from './editorAppBase.js';
import { registerExtension } from 'vscode/extensions';
import { verifyUrlorCreateDataUrl } from './utils.js';
/**
 * The vscode-apo monaco-editor app uses vscode user and extension configuration for monaco-editor.
 */
export class EditorAppExtended extends EditorAppBase {
    config;
    extensionRegisterResults = new Map();
    logger;
    constructor(id, userConfig, logger) {
        super(id);
        this.logger = logger;
        const userAppConfig = userConfig.wrapperConfig.editorAppConfig;
        this.config = this.buildConfig(userAppConfig);
        this.config.extensions = userAppConfig.extensions ?? undefined;
        this.config.userConfiguration = userAppConfig.userConfiguration ?? undefined;
    }
    getConfig() {
        return this.config;
    }
    getExtensionRegisterResult(extensionName) {
        return this.extensionRegisterResults.get(extensionName);
    }
    specifyServices() {
        return {
            ...getThemeServiceOverride(),
            ...getTextmateServiceOverride()
        };
    }
    async init() {
        // await all extensions that should be ready beforehand
        // always await theme extension
        const awaitReadiness = (this.config.awaitExtensionReadiness ?? []).concat(whenReadyTheme);
        await this.awaitReadiness(awaitReadiness);
        if (this.config.extensions) {
            const allPromises = [];
            for (const extensionConfig of this.config.extensions) {
                const manifest = extensionConfig.config;
                const extRegResult = registerExtension(manifest, 1 /* ExtensionHostKind.LocalProcess */);
                this.extensionRegisterResults.set(manifest.name, extRegResult);
                if (extensionConfig.filesOrContents && Object.hasOwn(extRegResult, 'registerFileUrl')) {
                    for (const entry of extensionConfig.filesOrContents) {
                        extRegResult.registerFileUrl(entry[0], verifyUrlorCreateDataUrl(entry[1]));
                    }
                }
                allPromises.push(extRegResult.whenReady());
            }
            await Promise.all(allPromises);
        }
        // buildConfig ensures userConfiguration is available
        await this.updateUserConfiguration(this.config.userConfiguration?.json);
        this.logger?.info('Init of Extended App was completed.');
    }
    disposeApp() {
        this.disposeEditor();
        this.disposeDiffEditor();
        this.extensionRegisterResults.forEach((k) => k?.dispose());
    }
    isAppConfigDifferent(orgConfig, config, includeModelData) {
        let different = false;
        if (includeModelData) {
            different = isModelUpdateRequired(orgConfig, config) !== ModelUpdateType.NONE;
        }
        const propsExtended = ['useDiffEditor', 'domReadOnly', 'readOnly', 'awaitExtensionReadiness', 'overrideAutomaticLayout', 'editorOptions', 'diffEditorOptions', 'userConfiguration', 'extensions'];
        const propCompareExtended = (name) => {
            return !isEqual(orgConfig[name], config[name]);
        };
        different = different || propsExtended.some(propCompareExtended);
        return different;
    }
}
//# sourceMappingURL=editorAppExtended.js.map