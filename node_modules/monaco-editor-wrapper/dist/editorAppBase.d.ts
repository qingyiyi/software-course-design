import { editor, Uri } from 'monaco-editor';
export type ModelUpdate = {
    languageId: string;
    code?: string;
    codeUri?: string;
    codeOriginal?: string;
    codeOriginalUri?: string;
};
export type EditorAppType = 'extended' | 'classic';
export type EditorAppConfigBase = ModelUpdate & {
    $type: EditorAppType;
    useDiffEditor: boolean;
    domReadOnly?: boolean;
    readOnly?: boolean;
    awaitExtensionReadiness?: Array<() => Promise<void>>;
    overrideAutomaticLayout?: boolean;
    editorOptions?: editor.IStandaloneEditorConstructionOptions;
    diffEditorOptions?: editor.IStandaloneDiffEditorConstructionOptions;
};
export declare enum ModelUpdateType {
    NONE = 0,
    CODE = 1,
    MODEL = 2
}
/**
 * This is the base class for both Monaco Ediotor Apps:
 * - EditorAppClassic
 * - EditorAppExtended
 *
 * It provides the generic functionality for both implementations.
 */
export declare abstract class EditorAppBase {
    private id;
    private editor;
    private diffEditor;
    private modelRef;
    private modelOriginalRef;
    constructor(id: string);
    protected buildConfig(userAppConfig: EditorAppConfigBase): EditorAppConfigBase;
    haveEditor(): boolean;
    getEditor(): editor.IStandaloneCodeEditor | undefined;
    getDiffEditor(): editor.IStandaloneDiffEditor | undefined;
    createEditors(container: HTMLElement): Promise<void>;
    protected disposeEditor(): void;
    protected disposeDiffEditor(): void;
    getModel(original?: boolean): editor.ITextModel | undefined;
    updateModel(modelUpdate: ModelUpdate): Promise<void>;
    private updateEditorModel;
    updateDiffModel(modelUpdate: ModelUpdate): Promise<void>;
    private updateDiffEditorModel;
    private updateAppConfig;
    getEditorUri(uriType: 'code' | 'codeOriginal'): Uri;
    updateLayout(): void;
    awaitReadiness(awaitExtensionReadiness?: Array<() => Promise<void>>): Promise<void | void[]>;
    updateMonacoEditorOptions(options: editor.IEditorOptions & editor.IGlobalEditorOptions): void;
    updateUserConfiguration(json?: string): Promise<void>;
    abstract init(): Promise<void>;
    abstract specifyServices(): editor.IEditorOverrideServices;
    abstract getConfig(): EditorAppConfigBase;
    abstract disposeApp(): void;
    abstract isAppConfigDifferent(orgConfig: EditorAppConfigBase, config: EditorAppConfigBase, includeModelData: boolean): boolean;
}
export declare const isCodeUpdateRequired: (config: EditorAppConfigBase, modelUpdate: ModelUpdate) => ModelUpdateType.NONE | ModelUpdateType.CODE;
export declare const isModelUpdateRequired: (config: EditorAppConfigBase, modelUpdate: ModelUpdate) => ModelUpdateType;
/**
 * The check for equality relies on JSON.stringify for instances of type Object.
 * Everything else is directly compared.
 * In this context, the check for equality is sufficient.
 */
export declare const isEqual: (obj1: unknown, obj2: unknown) => boolean;
//# sourceMappingURL=editorAppBase.d.ts.map